{
  "$schema": "https://libauth.org/schemas/wallet-template-v0.schema.json",
  "description": "Drip Mine: An MEV faucet\n Contributed by Bitcoin Cash Autist - 2025 \n https://gitlab.com/0353F40E/drip-mine",
  "name": "DripMine",
  "entities": {
    "covenant": {
      "description": "Emit MEV as fees to miners.",
      "name": "Drip Mine",
      "scripts": [
        "unlock_return",
        "unlock_burn"
      ]
    }
  },
  "scenarios": {
    "base": {
      "description": "A set of working parameters with a half-life of decay of roughly four years",
      "name": "Base Scenario",
      "transaction": {
        "inputs": [
          {
            "outpointIndex": 0,
            "unlockingBytecode": [
              "slot"
            ],
            "sequenceNumber": 1
          }
        ],
        "outputs": [
          {
            "lockingBytecode": {
              "script": "drip_mine_covenant"
            }
          }
        ],
        "locktime": 0,
        "version": 2
      },
      "sourceOutputs": [
        {
          "lockingBytecode": [
            "slot"
          ]
        }
      ]
    },
    "return": {
      "description": "Drip value as fee, returning balance to thread.",
      "extends": "base",
      "name": "Drip",
      "transaction": {
        "outputs": [
          {
            "valueSatoshis": 4536
          }
        ]
      },
      "sourceOutputs": [
        {
          "lockingBytecode": [
            "slot"
          ],
          "valueSatoshis": 4700
        }
      ]
    },
    "burn": {
      "description": "Burn value below threshold as OP_RETURN.",
      "extends": "base",
      "name": "Drip Burn",
      "transaction": {
        "outputs": [
          {
            "lockingBytecode": {
              "script": "op_return"
            }
          }
        ]
      },
      "sourceOutputs": [
        {
          "lockingBytecode": [
            "slot"
          ],
          "valueSatoshis": 500
        }
      ]
    }
  },
  "scripts": {
    "unlock_return": {
      "passes": [
        "return"
      ],
      "name": "Drip MEV",
      "script": "// empty",
      "unlocks": "drip_mine_covenant"
    },
    "unlock_burn": {
      "passes": [
        "burn"
      ],
      "name": "Final MEV Burn",
      "script": "// empty",
      "unlocks": "drip_mine_covenant"
    },
    "op_return": {
      "lockingType": "standard",
      "name": "OP_RETURN",
      "script": "OP_RETURN"
    },
    "drip_mine_covenant": {
      "lockingType": "p2sh32",
      "name": "Drip Mine Covenant",
      "script": "// Drip Mine: An MEV faucet\n// Contributed by Bitcoin Cash Autist - 2025\n// https://gitlab.com/0353F40E/drip-mine\n// \n// contract DripMine() {\n\n    // function drip() {\n        // Drip once per block\n        OP_1 OP_CHECKSEQUENCEVERIFY OP_DROP\n        // require(tx.age >= 1);\n\n        // Drip will be released as TX fee\n        OP_TXINPUTCOUNT OP_1 OP_NUMEQUALVERIFY\n        OP_TXOUTPUTCOUNT OP_1 OP_NUMEQUALVERIFY\n        // require(tx.inputs.length == 1);\n        // require(tx.outputs.length == 1);\n\n        // dustLimit = 444 + output_size * 3; // p2sh32 output size is 44\n        <576> \n        // int dustLimit = 576;\n\n        // minPayout = this_tx_size * min_fee_rate; \n        // this TX size will be 164, double check when compiling\n        <164>\n        // int minPayout = 164;\n\n        // if we have enough to pay out the minimum and stay above dust limit\n        // then we drip from the contract\n        OP_INPUTINDEX OP_UTXOVALUE OP_ROT OP_2 OP_PICK OP_ADD OP_GREATERTHAN OP_IF\n        // if (tx.inputs[this.activeInputIndex].value > dustLimit + minPayout) {\n\n            // DripMine contract must be passed on\n            OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY\n            // require(tx.inputs[this.activeInputIndex].lockingBytecode ==\n            //         tx.outputs[this.activeInputIndex].lockingBytecode);\n\n            // Calculate maxPayout\n            // Decay half-life of 4 years\n            OP_INPUTINDEX OP_UTXOVALUE <4392> OP_MUL <1333036486> OP_DIV\n            // int maxPayout = (tx.inputs[this.activeInputIndex].value * 4392) / 1333036486;\n\n            // If calculated payout would be too low, switch to flat minPayout\n            OP_2DUP OP_GREATERTHAN OP_IF\n            // if (maxPayout < minPayout) {\n                OP_OVER OP_NIP\n                // maxPayout = minPayout;\n            // } \n            OP_ENDIF\n\n            // TX fee is the payout to miners\n            OP_INPUTINDEX OP_UTXOVALUE OP_INPUTINDEX OP_OUTPUTVALUE OP_SUB\n            // int payout = tx.inputs[this.activeInputIndex].value -\n            //              tx.outputs[this.activeInputIndex].value;\n            OP_2DUP OP_GREATERTHANOREQUAL OP_VERIFY\n            // require(payout <= maxPayout);\n\n        // else we sweep everything as fee and terminate the contract\n        OP_2DROP OP_ELSE\n        // } else {\n            // Burn the output with remainning value to miners' fees\n            OP_INPUTINDEX OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY\n            // require(tx.outputs[this.activeInputIndex].value == 0);\n            OP_INPUTINDEX OP_OUTPUTBYTECODE <0x6a> OP_EQUALVERIFY\n            // require(tx.outputs[this.activeInputIndex].lockingBytecode == 0x6a);\n        // } \n        OP_ENDIF \n    // } \n    OP_DROP OP_1\n// }\n"
    }
  },
  "supported": [
    "BCH_2023_05"
  ],
  "version": 0
}