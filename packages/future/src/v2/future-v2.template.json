{
  "$schema": "https://libauth.org/schemas/wallet-template-v0.schema.json",
  "description": "Templates for Future Bitcoin Cash ecosystem of contracts ",
  "name": "FBCH: Future Bitcoin Cash",
  "entities": {
    "coupon_vault": {
      "description": "An entity that holds coupons 'owned' by the covenant.",
      "name": "Coupon Vault",
      "scripts": [
        "coupon_unlock",
        "coupon_lock"
      ],
      "variables": {
        "amount": {
          "description": "Minimum required threshold to claim the coupon",
          "name": "Coupon Amount (Satoshis)",
          "type": "WalletData"
        },
        "lock": {
          "description": "The locking script the message coupon will target",
          "name": "Coupon destination",
          "type": "WalletData"
        }
      }
    },
    "future_vault": {
      "description": "An entity that holds coupons 'owned' by the covenant.",
      "name": "Future Vault",
      "scripts": [
        "vault_lock",
        "vault_unlock"
      ],
      "variables": {
        "locktime": {
          "description": "The timestamp (blocks) when the future vault will become bidirectional",
          "name": "Vault Locktime (blocks)",
          "type": "WalletData"
        }
      }
    },
    "future_channel": {
      "description": "Vault holding messages to be burned into coupons.",
      "name": "Future Chan",
      "scripts": [
        "process_message",
        "edit_message",
        "channel_lock"
      ],
      "variables": {
        "channel": {
          "description": "The subject of the channel",
          "name": "Channel (bytes)",
          "type": "WalletData"
        },
        "amount": {
          "description": "Minimum required threshold to claim the coupon",
          "name": "Coupon Amount (Satoshis)",
          "type": "WalletData"
        },
        "vault_script": {
          "description": "Unlocking bytecode for the future vault",
          "name": "Future Vault bytecode",
          "type": "AddressData"
        },
        "coupon_script": {
          "description": "Unlocking bytecode for the coupon vault",
          "name": "Future coupon bytecode",
          "type": "AddressData"
        }
      }
    },
    "wallet": {
      "description": "The entity paying transaction fees, swapping or editing messages.",
      "name": "Funding Entity",
      "scripts": [
        "wallet_lock",
        "wallet_unlock"
      ],
      "variables": {
        "key": {
          "description": "The private key that controls this wallet.",
          "name": "Key",
          "type": "HdKey"
        }
      }
    }
  },
  "scenarios": {
    "default_channel": {
      "data": {
        "bytecode": {
          "channel": "",
          "lock":"",
          "amount": "10000000",
          "vault_script": "0xc0d3c0d0a06376b17568c0cec0d188c0cdc0c788c0d0c0c693c0d3c0cc939c77",
          "coupon_script": "0x00cc00c694a16900c788c08bc39c"
        }
      },
      "description": "",
      "name": "Unnamed Scenario",
      "transaction": {
        "locktime": 990000
      }
    },
    "clear_spam": {
      "description": "Should clear a message sent with insufficient sats",
      "extends": "default_channel",
      "data": {
        "currentBlockHeight": 990000
      },
      "name": "Clear Spam Message",
      "transaction": {
        "inputs": [
          {
            "unlockingBytecode": [
              "slot"
            ]
          },
          {
            "unlockingBytecode": {
              "script": "wallet_unlock"
            }
          }
        ],
        "outputs": [
          {
            "lockingBytecode": {
              "script": "coupon_lock"
            },
            "valueSatoshis": 9900
          },
          {
            "lockingBytecode": {
              "script": "wallet_lock"
            },
            "valueSatoshis": 1000000
          }
        ],
        "locktime": 990000,
        "version": 2
      },
      "sourceOutputs": [
        {
          "lockingBytecode": [
            "slot"
          ],
          "valueSatoshis": 10000,
          "token": {
            "category": "dead00000000000000000000000000000000000000000000000000000000beef",
            "nft": {
              "commitment": "6a00000000000000000000000000000000000000000000000000000000beef",
              "capability": "none"
            }
          }
        },
        {
          "lockingBytecode": {
            "script": "wallet_lock"
          },
          "valueSatoshis": 1009900
        }
        
      ]
    },
    "transform_message": {
      "description": "Should transform a message into a coupon",
      "extends": "default_channel",
      "data": {
        "currentBlockHeight": 990000
      },
      "name": "Transform Message",
      "transaction": {
        "inputs": [
          {
            "unlockingBytecode": [
              "slot"
            ]
          },
          {
            "unlockingBytecode": {
              "script": "wallet_unlock"
            }
          }
        ],
        "outputs": [
          {
            "lockingBytecode": {
              "script": "coupon_lock"
            },
            "valueSatoshis": 10010
          }
        ],
        "locktime": 990000,
        "version": 2
      },
      "sourceOutputs": [
        {
          "lockingBytecode": [
            "slot"
          ],
          "valueSatoshis": 10000,
          "token": {
            "category": "dead00000000000000000000000000000000000000000000000000000000beef",
            "nft": {
              "commitment": "6a00000000000000000000000000000000000000000000000000000000beef",
              "capability": "none"
            }
          }
        },
        {
          "lockingBytecode": {
            "script": "wallet_lock"
          },
          "valueSatoshis": 9999
        }
      ]
    },
    "burn_message": {
      "description": "",
      "extends": "default_channel",
      "data": {
        "bytecode": {
          "channel": "",
          "lock":"",
          "amount": "100000000",
          "vault_script": "0xc0d3c0d0a06376b17568c0cec0d188c0cdc0c788c0d0c0c693c0d3c0cc939c77",
          "coupon_script": "0x00cc00c694a16900c788c08bc39c"
        }
      },
      "name": "Burn (censor) message",
      "transaction": {
        "inputs": [
          {
            "unlockingBytecode": [
              "slot"
            ]
          },
          {
            "unlockingBytecode": {
              "script": "wallet_unlock"
            }
          }
        ],
        "outputs": [
          {
            "lockingBytecode": {
              "script": "coupon_lock"
            },
            "valueSatoshis": 1000000
          }
        ]
      },
      "sourceOutputs": [
        {
          "lockingBytecode": [
            "slot"
          ],
          "valueSatoshis": 10000
        },
        {
          "lockingBytecode": {
            "script": "wallet_lock"
          },
          "valueSatoshis": 990000
        }
      ]
    },
    "edit_message": {
      "description": "Modify message with NFT key",
      "extends": "default_channel",
      "name": "Edit Message",
      "transaction": {
        "inputs": [
          {
            "outpointTransactionHash": "dead00000000000000000000000000000000000000000000000000000000beef",
            "outpointIndex": 1,
            "unlockingBytecode": [
              "slot"
            ],
            "sequenceNumber": 1000
          },
          {
            "unlockingBytecode": {
              "script": "wallet_unlock"
            }
          }
        ],
        "outputs": [
          {
            "valueSatoshis": 10000,
            "token": {
              "category": "dead00000000000000000000000000000000000000000000000000000000beef",
              "nft": {
                "commitment": "6a<'hi'>",
                "capability": "mutable"
              }
            },
            "lockingBytecode": {
              "script": "channel_lock"
            }
          },
          {
            "lockingBytecode": {
              "script": "wallet_lock"
            },
            "valueSatoshis": 800
          }
        ]
      },
      "sourceOutputs": [
        {
          "lockingBytecode": [
            "slot"
          ],
          "valueSatoshis": 10000,
          "token": {
            "category": "dead00000000000000000000000000000000000000000000000000000000beef",
            "nft": {
              "commitment": "6a<'hello'>",
              "capability": "mutable"
            }
          }
        },
        {
          "lockingBytecode": {
            "script": "wallet_lock"
          },
          "valueSatoshis": 800,
          "token": {
            "category": "dead00000000000000000000000000000000000000000000000000000000beef",
            "nft": {
              "commitment": "6a<beef>",
              "capability": "minting"
            }
          }
        }
      ]
    },
    "claim_coupon": {
      "description": "Claim a coupon",
      "data": {
        "bytecode": {
          "lock": "0xaa2082590fa4fd4f322dea535de4ebcebb6e65526e71432027a8ed6a3a201391d82c87",
          "amount": "10000000",
          "locktime": "1000"
        }
      },
      "name": "Claim Coupon",
      "transaction": {
        "inputs": [
          {
            "unlockingBytecode": {
              "script": "vault_unlock"
            }
          },
          {
            "unlockingBytecode": {
              "script": "wallet_unlock"
            }
          },
          {
            "outpointTransactionHash": "dead00000000000000000000000000000000000000000000000000000000beef",
            "outpointIndex": 0,
            "unlockingBytecode": [
              "slot"
            ]
          }
        ],
        "outputs": [
          {
            "lockingBytecode": {
              "script": "vault_lock"
            },
            "valueSatoshis": 10000001000,
            "token": {
              "amount": 1000,
              "category": "dead00000000000000000000000000000000000000000000000000000000beef"
            }
          }
        ]
      },
      "sourceOutputs": [
        {
          "lockingBytecode": {
            "script": "vault_lock"
          },
          "valueSatoshis": 1000,
          "token": {
            "amount": 10000001000,
            "category": "dead00000000000000000000000000000000000000000000000000000000beef"
          }
        },
        {
          "lockingBytecode": {
            "script": "wallet_lock"
          },
          "valueSatoshis": 10000000000
        },
        {
          "lockingBytecode": [
            "slot"
          ]
        }
      ]
    },
    "place_bch": {
      "description": "Place BCH into a Future Vault",
      "data": {
        "bytecode": {
          "locktime": "1000"
        }
      },
      "name": "Place BCH for FBCH",
      "transaction": {
        "inputs": [
          {
            "outpointTransactionHash": "dead00000000000000000000000000000000000000000000000000000000beef",
            "outpointIndex": 0,
            "unlockingBytecode": [
              "slot"
            ]
          },
          {
            "unlockingBytecode": {
              "script": "wallet_unlock"
            }
          }
        ],
        "outputs": [
          {
            "valueSatoshis": 21000000,
            "token": {
              "amount": 1000,
              "category": "dead00000000000000000000000000000000000000000000000000000000beef"
            },
            "lockingBytecode": {
              "script": "vault_lock"
            }
          },
          {
            "valueSatoshis": 1000,
            "token": {
              "amount": 20999000,
              "category": "dead00000000000000000000000000000000000000000000000000000000beef"
            },
            "lockingBytecode": {
              "script": "wallet_lock"
            }
          }
        ]
      },
      "sourceOutputs": [
        {
          "lockingBytecode": [
            "slot"
          ],
          "valueSatoshis": 1000,
          "token": {
            "amount": 21000000,
            "category": "dead00000000000000000000000000000000000000000000000000000000beef"
          }
        },
        {
          "valueSatoshis": 21000000
        }
      ]
    },
    "redeem_fbch": {
      "description": "",
      "data": {
        "bytecode": {
          "locktime": "1000"
        }
      },
      "name": "Redeem FBCH for BCH",
      "transaction": {
        "locktime": 1000,
        "inputs": [
          {
            "outpointTransactionHash": "dead00000000000000000000000000000000000000000000000000000000beef",
            "outpointIndex": 0,
            "unlockingBytecode": [
              "slot"
            ]
          },
          {
            "unlockingBytecode": {
              "script": "wallet_unlock"
            }
          }
        ],
        "outputs": [
          {
            "valueSatoshis": 21000000,
            "lockingBytecode": {
              "script": "vault_lock"
            },
            "token": {
              "amount": 1000,
              "category": "dead00000000000000000000000000000000000000000000000000000000beef"
            }
          },
          {
            "valueSatoshis": 1000,
            "token": {
              "amount": 20999000,
              "category": "dead00000000000000000000000000000000000000000000000000000000beef"
            }
          }
        ]
      },
      "sourceOutputs": [
        {
          "lockingBytecode": [
            "slot"
          ],
          "valueSatoshis": 1000,
          "token": {
            "amount": 21000000,
            "category": "dead00000000000000000000000000000000000000000000000000000000beef"
          }
        },
        {
          "lockingBytecode": {
            "script": "wallet_lock"
          },
          "valueSatoshis": 21000000
        }
      ]
    }
  },
  "scripts": {
    "process_message": {
      "passes": [
        "clear_spam",
        "transform_message",
        "burn_message"
      ],
      "fails": [
        "edit_message"
      ],
      "name": "Process Messages",
      "script": "OP_0 // function index\n",
      "unlocks": "channel_lock",
      "timeLockType": "height"
    },
    "edit_message": {
      "passes": [
        "edit_message"
      ],
      "fails": [
        "clear_spam",
        "transform_message",
        "burn_message"
      ],
      "name": "Edit Message",
      "script": "OP_1 // function index\n",
      "unlocks": "channel_lock",
      "timeLockType": "height"
    },
    "channel_lock": {
      "lockingType": "p2sh32",
      "name": "Channel Message Lock",
      "script": "<channel>\nOP_OVER OP_0 OP_NUMEQUAL OP_IF\nOP_INPUTINDEX OP_UTXOVALUE OP_10 OP_DIV <1000> OP_MUL\n<10_000_000>\nOP_INPUTINDEX OP_OUTPUTVALUE OP_INPUTINDEX OP_UTXOVALUE OP_10 OP_MUL OP_NUMEQUAL\nOP_DUP OP_IF\n<100_000_000> OP_ROT OP_DROP OP_SWAP\nOP_ENDIF\nOP_INPUTINDEX OP_OUTPUTVALUE OP_INPUTINDEX OP_UTXOVALUE OP_NUMEQUAL\nOP_DUP OP_IF\n<1_000> OP_CHECKSEQUENCEVERIFY\nOP_DROP OP_ENDIF\nOP_NOT OP_SWAP OP_NOT OP_BOOLAND OP_IF\nOP_OVER <10_000> OP_SUB OP_CHECKLOCKTIMEVERIFY OP_DROP\nOP_ELSE\n  OP_OVER OP_SIZE\n  OP_NIP OP_2 OP_PICK\n   OP_CAT <vault_script> OP_CAT\n <0xaa20> OP_OVER OP_HASH256 OP_CAT <0x87> OP_CAT\n OP_2 OP_PICK OP_SIZE OP_NIP\n OP_3 OP_PICK OP_CAT OP_OVER OP_SIZE OP_NIP\n OP_CAT OP_OVER OP_CAT\n <coupon_script> OP_CAT <0xaa20> OP_OVER OP_HASH256 OP_CAT <0x87> OP_CAT OP_INPUTINDEX OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY\n OP_2DROP OP_2DROP OP_ENDIF OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY\n OP_2DROP OP_2DROP OP_1 OP_ELSE OP_SWAP OP_1 OP_NUMEQUALVERIFY\n OP_INPUTINDEX OP_OUTPUTVALUE OP_INPUTINDEX OP_UTXOVALUE OP_NUMEQUALVERIFY\n OP_INPUTINDEX OP_OUTPUTBYTECODE OP_INPUTINDEX OP_UTXOBYTECODE OP_EQUALVERIFY\n OP_TXINPUTCOUNT OP_1SUB OP_UTXOTOKENCATEGORY\nOP_INPUTINDEX OP_UTXOTOKENCATEGORY <32> OP_SPLIT OP_DROP OP_2 OP_CAT OP_EQUAL\nOP_NIP\nOP_ENDIF"
    },
    "coupon_unlock": {
      "passes": [
        "claim_coupon"
      ],
      "name": "Unlock Coupon",
      "script": "// \"claim\" function parameters\n// none\n",
      "unlocks": "coupon_lock"
    },
    "coupon_lock": {
      "lockingType": "p2sh32",
      "name": "Coupon Lock",
      "script": "<lock> <amount>\nOP_0 OP_OUTPUTVALUE OP_0 OP_UTXOVALUE OP_SUB OP_1 OP_ROLL OP_GREATERTHANOREQUAL OP_VERIFY\n OP_0 OP_UTXOBYTECODE OP_1 OP_ROLL OP_EQUAL OP_VERIFY \nOP_INPUTINDEX OP_1 OP_ADD OP_TXINPUTCOUNT OP_NUMEQUAL"
    },
    "coupon_lock_2": {
      "lockingType": "p2sh32",
      "name": "Coupon Lock",
      "script": "$(<0xaa20>$(<locktime><vault_script> OP_HASH256)<0x87>) <amount>\nOP_0 OP_OUTPUTVALUE OP_0 OP_UTXOVALUE OP_SUB OP_1 OP_ROLL OP_GREATERTHANOREQUAL OP_VERIFY\n OP_0 OP_UTXOBYTECODE OP_1 OP_ROLL OP_EQUAL OP_VERIFY \nOP_INPUTINDEX OP_1 OP_ADD OP_TXINPUTCOUNT OP_NUMEQUAL"
    },
    "wallet_lock": {
      "lockingType": "standard",
      "name": "Wallet Lock",
      "script": "OP_DUP\nOP_HASH160 <$(<key.public_key> OP_HASH160\n)> OP_EQUALVERIFY\nOP_CHECKSIG"
    },
    "wallet_unlock": {
      "name": "Wallet Unlock",
      "script": "<key.schnorr_signature.all_outputs>\n<key.public_key>",
      "unlocks": "wallet_lock"
    },
    "vault_unlock": {
      "passes": [
        "place_bch",
        "redeem_fbch"
      ],
      "name": "Unlock Future Vault",
      "script": "// \"swap\" function parameters\n// none\n",
      "unlocks": "vault_lock",
      "timeLockType": "height"
    },
    "vault_lock": {
      "lockingType": "p2sh32",
      "name": "Lock Future Vault",
      "script": "<locktime> OP_INPUTINDEX OP_OUTPUTTOKENAMOUNT\nOP_INPUTINDEX OP_UTXOTOKENAMOUNT OP_GREATERTHAN\n OP_IF OP_DUP OP_CHECKLOCKTIMEVERIFY OP_DROP OP_ENDIF\nOP_INPUTINDEX OP_UTXOTOKENCATEGORY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY\nOP_INPUTINDEX OP_OUTPUTBYTECODE OP_INPUTINDEX OP_UTXOBYTECODE OP_EQUALVERIFY\nOP_INPUTINDEX OP_UTXOTOKENAMOUNT OP_INPUTINDEX OP_UTXOVALUE OP_ADD\nOP_INPUTINDEX OP_OUTPUTTOKENAMOUNT OP_INPUTINDEX OP_OUTPUTVALUE OP_ADD\nOP_NUMEQUAL OP_NIP"
    },
    "gantry_lock": {
      "lockingType": "p2sh32",
      "name": "Gantry",
      "script": "<vault_script> \n<step> \n OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY\n OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY\n OP_INPUTINDEX OP_UTXOTOKENCATEGORY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY\n OP_INPUTINDEX OP_OUTPUTVALUE OP_INPUTINDEX OP_UTXOVALUE <8500> OP_SUB OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOTOKENCOMMITMENT OP_BIN2NUM OP_INPUTINDEX OP_OUTPUTTOKENCOMMITMENT OP_OVER OP_3 OP_PICK OP_ADD OP_4 OP_NUM2BIN OP_EQUALVERIFY OP_DUP OP_ROT OP_DIV OP_10 OP_MOD OP_0 OP_NUMEQUAL OP_IF OP_TXOUTPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_ELSE OP_DUP OP_SIZE OP_NIP OP_OVER OP_CAT OP_2 OP_PICK OP_CAT <0xaa20> OP_OVER OP_HASH256 OP_CAT <0x87> OP_CAT OP_1 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENAMOUNT <2100000000000000> OP_NUMEQUALVERIFY OP_1 OP_OUTPUTVALUE <1000> OP_NUMEQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENAMOUNT <2100000000000000> OP_NUMEQUALVERIFY OP_2 OP_OUTPUTVALUE <1000> OP_NUMEQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENAMOUNT <2100000000000000> OP_NUMEQUALVERIFY OP_3 OP_OUTPUTVALUE <1000> OP_NUMEQUALVERIFY OP_4 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENAMOUNT <2100000000000000> OP_NUMEQUALVERIFY OP_4 OP_OUTPUTVALUE <1000> OP_NUMEQUALVERIFY OP_5 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_5 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_5 OP_OUTPUTTOKENAMOUNT <2100000000000000> OP_NUMEQUALVERIFY OP_5 OP_OUTPUTVALUE <1000> OP_NUMEQUALVERIFY OP_6 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_6 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_6 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_6 OP_OUTPUTTOKENAMOUNT <2100000000000000> OP_NUMEQUALVERIFY OP_6 OP_OUTPUTVALUE <1000> OP_NUMEQUALVERIFY OP_7 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_7 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_7 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_7 OP_OUTPUTTOKENAMOUNT <2100000000000000> OP_NUMEQUALVERIFY OP_7 OP_OUTPUTVALUE <1000> OP_NUMEQUALVERIFY OP_8 OP_OUTPUTBYTECODE <OP_RETURN <'FBCH'>> OP_4 OP_PICK OP_SIZE OP_NIP OP_CAT OP_4 OP_PICK OP_CAT OP_EQUALVERIFY OP_8 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_8 OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_9 OP_NUMEQUALVERIFY OP_2DROP OP_ENDIF OP_2DROP OP_1"
    },
    "battery_lock": {
      "lockingType": "p2sh32",
      "name": "Battery",
      "script": "<vault_script> <gantry_script> <857000> <1_000_000> OP_INPUTINDEX OP_UTXOTOKENCOMMITMENT OP_BIN2NUM OP_2 OP_PICK OP_3 OP_ROLL OP_2 OP_PICK OP_MOD OP_SUB OP_OVER OP_ADD OP_4 OP_NUM2BIN OP_0 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_3 OP_PICK OP_SIZE OP_NIP OP_4 OP_ROLL OP_CAT OP_OVER OP_SIZE OP_NIP OP_CAT OP_OVER OP_CAT OP_3 OP_ROLL OP_CAT <0xaa20> OP_SWAP OP_HASH256 OP_CAT <0x87> OP_CAT OP_0 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_UTXOTOKENCATEGORY <32> OP_SPLIT OP_DROP OP_1 OP_CAT OP_0 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_TXOUTPUTCOUNT OP_2 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTVALUE <42500000000> OP_2 OP_PICK OP_DIV OP_GREATERTHAN OP_VERIFY OP_1 OP_OUTPUTVALUE OP_INPUTINDEX OP_UTXOVALUE <42500000000> OP_3 OP_PICK OP_DIV OP_SUB <1800> OP_SUB OP_GREATERTHAN OP_VERIFY OP_DUP OP_ROT OP_GREATERTHAN OP_IF OP_1 OP_OUTPUTTOKENCOMMITMENT OP_OVER OP_10 OP_DIV OP_4 OP_NUM2BIN OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCATEGORY OP_INPUTINDEX OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_1 OP_OUTPUTBYTECODE OP_INPUTINDEX OP_UTXOBYTECODE OP_EQUALVERIFY OP_ELSE OP_1 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_DROP OP_1"
    }
  },
  "supported": [
    "BCH_SPEC"
  ],
  "version": 0
}