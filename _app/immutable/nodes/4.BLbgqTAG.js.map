{"version":3,"file":"4.BLbgqTAG.js","sources":["../../../../../../src/routes/bpt/+page.ts","../../../../../../src/lib/images/tBPT.svg","../../../../../../src/lib/images/BPT.svg","../../../../../../../blockpoint/out/index.js","../../../../../../src/routes/bpt/README.md","../../../../../../src/routes/bpt/+page.svelte"],"sourcesContent":["export const prerender = true;","export default \"data:image/svg+xml,%3csvg%20style='height:400px;width:400px'%20version='1.1'%20viewBox='0%200%2016%2016'%20xmlns='http://www.w3.org/2000/svg'%3e%3cdefs%3e%3clinearGradient%20id='a'%20gradientTransform='rotate(75)'%3e%3cstop%20stop-color='%23f00'%20offset='.05'/%3e%3cstop%20stop-color='%2300808099'%20offset='.95'/%3e%3c/linearGradient%3e%3c/defs%3e%3cpath%20d='m6%201c-2.77%200-5%202.23-5%205v4c0%202.77%202.23%205%205%205h4c2.77%200%205-2.23%205-5v-4c0-2.77-2.23-5-5-5h-4zm2%206a1%201%200%200%201%201%201%201%201%200%200%201-1%201%201%201%200%200%201-1-1%201%201%200%200%201%201-1z'%20fill='url(%23a)'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3c?xml%20version='1.0'%20encoding='UTF-8'%20standalone='no'?%3e%3csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2016%2016'%20style='width:400px;%20height:400px;'%3e%3cdefs%3e%3clinearGradient%20id='grad'%20gradientTransform='rotate(75)'%3e%3cstop%20offset='5%25'%20stop-color='aqua'%20/%3e%3cstop%20offset='95%25'%20stop-color='%2300808099'%20/%3e%3c/linearGradient%3e%3c/defs%3e%3cpath%20style='fill:url(%23grad)'%20d='M%206%201%20C%203.23%201%201%203.23%201%206%20L%201%2010%20C%201%2012.77%203.23%2015%206%2015%20L%2010%2015%20C%2012.77%2015%2015%2012.77%2015%2010%20L%2015%206%20C%2015%203.23%2012.77%201%2010%201%20L%206%201%20z%20M%208%207%20A%201%201%200%200%201%209%208%20A%201%201%200%200%201%208%209%20A%201%201%200%200%201%207%208%20A%201%201%200%200%201%208%207%20z%20'%20/%3e%3c/svg%3e\"","import template from './template.v3.json' with { type: \"json\" };\nimport packageInfo from '../package.json' with { type: \"json\" };\nimport { bigIntToVmNumber, createVirtualMachineBCH, deriveHdPublicKey, generateTransaction, hdPrivateKeyToP2pkhLockingBytecode, hexToBin, verifyTransactionTokens } from '@bitauth/libauth';\nimport { getTransactionFees, getAddress, getLibauthCompiler, getScriptHash, sumSourceOutputValue, sumSourceOutputTokenAmounts } from '@unspent/tau';\nexport const BPT = hexToBin('7fe0cd5197494e47ade81eb164dcdbd51859ffbe581fe4a818085d56b2f3062c');\nexport const tBPT = hexToBin('ffc9d3b3488e890ef113b1c74f40e1f5eb1147a7d4191cecac89fd515721a271');\nexport default class BlockPoint {\n    static USER_AGENT = packageInfo.name;\n    static tokenAware = true;\n    static template = template;\n    static compiler = getLibauthCompiler(this.template);\n    static vm = createVirtualMachineBCH();\n    static getLockingBytecode(data = {}) {\n        const lockingBytecodeResult = this.compiler.generateBytecode({\n            data: data,\n            scriptId: 'lock'\n        });\n        if (!lockingBytecodeResult.success)\n            throw new Error('Failed to generate bytecode, script: , ' + JSON.stringify(lockingBytecodeResult, null, '  '));\n        return lockingBytecodeResult.bytecode;\n    }\n    static getScriptHash(reversed = true) {\n        return getScriptHash(this.getLockingBytecode(), reversed);\n    }\n    /**\n     * Get cashaddress\n     *\n     * @param prefix - cashaddress prefix.\n     * @throws {Error} if transaction generation fails.\n     * @returns a cashaddress.\n     */\n    static getAddress(prefix = \"bitcoincash\") {\n        return getAddress(this.getLockingBytecode(), prefix, this.tokenAware);\n    }\n    static getSourceOutput(utxo) {\n        return {\n            lockingBytecode: this.getLockingBytecode(),\n            valueSatoshis: BigInt(utxo.value),\n            token: {\n                category: hexToBin(utxo.token_data.category),\n                amount: BigInt(utxo.token_data?.amount)\n            }\n        };\n    }\n    static getInput(utxo, age) {\n        return {\n            outpointIndex: utxo.tx_pos,\n            outpointTransactionHash: hexToBin(utxo.tx_hash),\n            sequenceNumber: age,\n            unlockingBytecode: {\n                data: {\n                    \"bytecode\": {\n                        \"age\": bigIntToVmNumber(BigInt(age))\n                    }\n                },\n                compiler: this.compiler,\n                script: 'unlock',\n                valueSatoshis: BigInt(utxo.value),\n            },\n        };\n    }\n    static getOutput(utxo, amount, age) {\n        return {\n            lockingBytecode: {\n                data: {\n                    \"bytecode\": {\n                        \"age\": bigIntToVmNumber(BigInt(age))\n                    }\n                },\n                compiler: this.compiler,\n                script: 'lock'\n            },\n            valueSatoshis: BigInt(utxo.value),\n            token: {\n                category: hexToBin(utxo.token_data.category),\n                amount: BigInt(utxo.token_data?.amount) - BigInt(amount)\n            }\n        };\n    }\n    static getWalletSourceOutput(utxo, key) {\n        const lockingBytecode = key ? hdPrivateKeyToP2pkhLockingBytecode({\n            addressIndex: 0,\n            hdPrivateKey: key\n        }) : Uint8Array.from(Array(33));\n        return {\n            lockingBytecode: lockingBytecode,\n            valueSatoshis: BigInt(utxo.value),\n            token: utxo.token_data ? {\n                category: hexToBin(utxo.token_data.category),\n                amount: BigInt(utxo.token_data?.amount)\n            } : undefined\n        };\n    }\n    static getWalletInput(utxo, age, privateKey, addressIndex = 0) {\n        const unlockingData = privateKey ? {\n            compiler: this.compiler,\n            data: {\n                hdKeys: {\n                    addressIndex: addressIndex,\n                    hdPrivateKeys: {\n                        'wallet': privateKey\n                    },\n                }\n            },\n            script: 'wallet_unlock',\n            valueSatoshis: BigInt(utxo.value)\n        } : Uint8Array.from(Array());\n        return {\n            outpointIndex: utxo.tx_pos,\n            outpointTransactionHash: hexToBin(utxo.tx_hash),\n            sequenceNumber: age,\n            unlockingBytecode: unlockingData,\n        };\n    }\n    static getTokenOutput(amount, privateKey, addressIndex = 0, category = BPT) {\n        const lockingBytecode = privateKey ? {\n            compiler: this.compiler,\n            data: {\n                hdKeys: {\n                    addressIndex: addressIndex,\n                    hdPublicKeys: {\n                        'wallet': deriveHdPublicKey(privateKey).hdPublicKey\n                    },\n                },\n            },\n            script: 'wallet_lock'\n        } : Uint8Array.from(Array(33));\n        return {\n            lockingBytecode: lockingBytecode,\n            valueSatoshis: 800n,\n            token: {\n                category: category,\n                amount: BigInt(amount)\n            }\n        };\n    }\n    static getChangeOutput(utxo, privateKey, addressIndex = 0) {\n        const lockingBytecode = privateKey ? {\n            compiler: this.compiler,\n            data: {\n                hdKeys: {\n                    addressIndex: addressIndex,\n                    hdPublicKeys: {\n                        'wallet': deriveHdPublicKey(privateKey).hdPublicKey\n                    },\n                },\n            },\n            script: 'wallet_lock'\n        } : Uint8Array.from(Array(33));\n        return {\n            lockingBytecode: lockingBytecode,\n            valueSatoshis: BigInt(utxo.value) - 800n\n        };\n    }\n    /**\n     * Get source outputs, transform contract & wallet outpoints for spending verification.\n     *\n     * @param contractUtxo - contract outputs to use as input.\n     * @param walletUtxo - wallet outputs to use as input.\n     * @param key - private key to sign transaction wallet inputs.\n     *\n     * @returns a transaction template.\n     */\n    static getSourceOutputs(contractUtxo, walletUtxo, key) {\n        const sourceOutputs = [];\n        sourceOutputs.push(this.getWalletSourceOutput(walletUtxo, key));\n        sourceOutputs.push(this.getSourceOutput(contractUtxo));\n        return sourceOutputs;\n    }\n    /**\n     * Claim some Block Points.\n     *\n     * @param now - The current bitcoin block height timestamp (expressed in blocks).\n     * @param contractUtxo - contract outputs to use as input.\n     * @param walletUtxos - wallet outputs to use as input.\n     * @param key - private key to sign transaction wallet inputs.\n     * @param fee - transaction fee to pay (per byte); default 1 sat/byte.\n     *\n     * @throws {Error} if transaction generation fails.\n     * @returns a transaction template.\n     */\n    static claim(now, contractUtxo, walletUtxo, key, category, fee = 1) {\n        const inputs = [];\n        const outputs = [];\n        let bptCat = category ? hexToBin(category) : BPT;\n        const youngerUtxo = walletUtxo.height > contractUtxo.height ? walletUtxo.height : contractUtxo.height;\n        const age = now - youngerUtxo;\n        const amount = Math.floor(age * walletUtxo.value / 100000000);\n        let config = {\n            locktime: 0,\n            version: 2,\n            inputs,\n            outputs\n        };\n        config.inputs.push(this.getWalletInput(walletUtxo, age, key));\n        config.outputs.push(this.getTokenOutput(amount, key, 0, bptCat));\n        config.inputs.push(this.getInput(contractUtxo, age));\n        config.outputs.push(this.getOutput(contractUtxo, amount, age));\n        config.outputs.push(this.getChangeOutput(walletUtxo, key, 0));\n        let result = generateTransaction(config);\n        if (!result.success)\n            throw new Error('generate transaction failed!, errors: ' + JSON.stringify(result.errors, null, '  '));\n        const estimatedFee = getTransactionFees(result.transaction, fee);\n        // subtract fees off the change output\n        config.outputs[2].valueSatoshis = config.outputs[2].valueSatoshis - estimatedFee;\n        result = generateTransaction(config);\n        if (!result.success)\n            throw new Error('generate transaction failed!, errors: ' + JSON.stringify(result.errors, null, '  '));\n        const sourceOutputs = this.getSourceOutputs(contractUtxo, walletUtxo, key);\n        const transaction = result.transaction;\n        const tokenValidationResult = verifyTransactionTokens(transaction, sourceOutputs);\n        if (tokenValidationResult !== true && fee > 0)\n            throw tokenValidationResult;\n        let verify = this.vm.verify({\n            sourceOutputs: sourceOutputs,\n            transaction: transaction,\n        });\n        let feeEstimate = sumSourceOutputValue(sourceOutputs) - sumSourceOutputValue(transaction.outputs);\n        if (feeEstimate > 5000)\n            verify = `Excessive fees ${feeEstimate}`;\n        if (sumSourceOutputTokenAmounts(sourceOutputs, category) == 0n)\n            verify = `Error checking token input`;\n        let tokenDiff = sumSourceOutputTokenAmounts(sourceOutputs, category) -\n            sumSourceOutputTokenAmounts(transaction.outputs, category);\n        if (tokenDiff !== 0n)\n            verify = `Swapping should not create destroy tokens, token difference: ${tokenDiff}`;\n        return {\n            sourceOutputs: sourceOutputs,\n            transaction: transaction,\n            verify: verify\n        };\n    }\n}\n//# sourceMappingURL=index.js.map","<script>\n    import { BPT as bptCat } from '@unspent/blockpoint';\n    import { binToHex } from \"@bitauth/libauth\";\n</script>\n\n### About Block Points\n\nBlock Points (BPT) are a reward token distributed based on the value and age of coins users have already hold. \n\n\nThe CashToken category id for Block Points is:\n\n   [{ binToHex(bptCat) }](https://explorer.salemkode.com/token/7fe0cd5197494e47ade81eb164dcdbd51859ffbe581fe4a818085d56b2f3062c)\n\nAll 9.2 quintillion Block Points were [minted in this transaction](https://explorer.salemkode.com/tx/2420c5803f7318160bd4ed6729eecb8385688b79fa5653b8c64a1a8167b5e79f). The entire circulating supply was then sent to the Block Point vault contract in [this transaction](https://explorer.salemkode.com/address/bitcoincash:r0ak899wsk9mr9wz78tw2pnppumzry6ypejfvsad6u4vrj4kdewpwsmza35av).\n\nThe Block Point vault can only release tokens based on the age of the vault thread or coin being used (whichever utxo is younger). The vault can release tokens at a rate of one Block Point (1 BPT) per coin per block. Users with that don't have a whole coin can claim rewards at the same rate as user with many blocks.\n\nAnytime coins are moved, the age of the coin resets. So don't move coins to claim Block Points, wait until you can sign with the wallet you have. ","<script lang=\"ts\">\n\timport { onMount, onDestroy } from 'svelte';\n\timport { page } from '$app/state';\n\n\timport { binToHex, cashAddressToLockingBytecode, encodeTransactionBCH } from '@bitauth/libauth';\n\n\timport bch from '$lib/images/BCH.svg';\n\timport tBPT from '$lib/images/tBPT.svg';\n\timport BPT from '$lib/images/BPT.svg';\n\n\timport { ElectrumClient, ConnectionStatus } from '@electrum-cash/network';\n\n\timport { IndexedDBProvider } from '@mainnet-cash/indexeddb-storage';\n\timport { BaseWallet, Wallet, TestNetWallet, hexToBin } from 'mainnet-js';\n\n\timport {\n\t\tsumUtxoValue,\n\t\tsumTokenAmounts,\n\t\tgetScriptHash,\n\t\tgetHdPrivateKey,\n\t\ttype UtxoI\n\t} from '@unspent/tau';\n\timport BlockPoint from '@unspent/blockpoint';\n\timport { BPT as bptCat, tBPT as tbptCat } from '@unspent/blockpoint';\n\n\timport Readme from './README.md';\n\timport BitauthLink from '$lib/BitauthLink.svelte';\n\timport Transaction from '$lib/Transaction.svelte';\n\timport CONNECTED from '$lib/images/connected.svg';\n\timport DISCONNECTED from '$lib/images/disconnected.svg';\n\n\tlet now = 0;\n\tlet connectionStatus = '';\n\tlet contractState = '';\n\n\tlet transaction_hex = '';\n\tlet transaction: any = undefined;\n\tlet transactionValid = false;\n\tlet sourceOutputs: any = undefined;\n\n\tlet unspent: any[] = [];\n\tlet walletUnspent: any[] = [];\n\tlet key = '';\n\tlet electrumClient: any;\n\tlet scripthash = '';\n\tlet walletScriptHash = '';\n\n\tlet sumWalletBlockPoint = 0n;\n\tlet sumWallet = 0;\n\tlet sumVaultBlockPoint = 0n;\n\tlet sumVault = 0;\n\n\tscripthash = BlockPoint.getScriptHash();\n\n\tconst isMainnet = page.url.hostname == 'vox.cash';\n\tlet icon = isMainnet ? BPT : tBPT;\n\tlet category = isMainnet ? binToHex(bptCat) : binToHex(tbptCat);\n\tlet baseTicker = isMainnet ? 'BCH' : 'tBCH';\n\tlet ticker = isMainnet ? 'BPT' : 'tBPT';\n\tlet prefix = isMainnet ? 'bitcoincash' : 'bchtest';\n\n\tlet server = isMainnet ? 'bch.imaginary.cash' : 'chipnet.bch.ninja';\n\n\tlet spent = new Set();\n\n\tlet amount = 0;\n\tlet wallet: any;\n\tlet transactionError: string | boolean = '';\n\n\tconst handleNotifications = function (data: any) {\n\t\tif (data.method === 'blockchain.headers.subscribe') {\n\t\t\tlet d = data.params[0];\n\t\t\tnow = d.height;\n\t\t} else if (data.method === 'blockchain.scripthash.subscribe') {\n\t\t\tif (data.params[1] !== contractState) {\n\t\t\t\tcontractState = data.params[1];\n\t\t\t\tconnectionStatus = ConnectionStatus[electrumClient.status];\n\t\t\t\tamount = 0;\n\t\t\t\tupdateUnspent();\n\t\t\t\tupdateWallet();\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log(data);\n\t\t}\n\t};\n\n\tconst updateWallet = async function () {\n\t\tlet response = await electrumClient.request(\n\t\t\t'blockchain.scripthash.listunspent',\n\t\t\twalletScriptHash,\n\t\t\t'include_tokens'\n\t\t);\n\t\tif (response instanceof Error) throw response;\n\t\tlet walletUnspentIds = new Set(response.map((utxo: any) => `${utxo.tx_hash}\":\"${utxo.tx_pos}`));\n\t\tif (walletUnspent.length == 0 || spent.intersection(walletUnspentIds).size == 0) {\n\t\t\twalletUnspent = response;\n\t\t}\n\n\t\tsumWallet = sumUtxoValue(walletUnspent, true);\n\t\tsumWalletBlockPoint = sumTokenAmounts(walletUnspent, category);\n\t\twalletUnspent = walletUnspent.filter((t) => t.height > 0);\n\t};\n\n\tconst updateUnspent = async function () {\n\t\tlet response = await electrumClient.request(\n\t\t\t'blockchain.scripthash.listunspent',\n\t\t\tscripthash,\n\t\t\t'include_tokens'\n\t\t);\n\t\tif (response instanceof Error) throw response;\n\t\tlet unspentIds = new Set(response.map((utxo: any) => `${utxo.tx_hash}\":\"${utxo.tx_pos}`));\n\t\tif (unspent.length == 0 || spent.intersection(unspentIds).size == 0) {\n\t\t\tunspent = response;\n\t\t}\n\t\tunspent = unspent.filter((t) => t.height > 0);\n\t\tunspent = unspent.filter((t) => t.token_data && t.token_data.category == category);\n\t\tunspent.sort((a, b) => a.height - b.height);\n\t\tsumVault = sumUtxoValue(unspent, true);\n\t\tsumVaultBlockPoint = sumTokenAmounts(unspent, category);\n\t};\n\n\tconst broadcast = async function (raw_tx: string) {\n\t\tlet response = await electrumClient.request('blockchain.transaction.broadcast', raw_tx);\n\t\tif (response instanceof Error) {\n\t\t\tconnectionStatus = ConnectionStatus[electrumClient.status];\n\t\t\tthrow response;\n\t\t}\n\t\tresponse as any[];\n\t};\n\n\tconst claimAll = function () {\n\t\twalletUnspent.map((walletUtxo, i) => {\n\t\t\tclaimReward(now, unspent[i], walletUtxo, key, category);\n\t\t});\n\t};\n\n\tconst claimReward = function (\n\t\tnow: number,\n\t\tunspent: UtxoI,\n\t\twallet: UtxoI,\n\t\tkey: string,\n\t\tcategory: any\n\t) {\n\t\ttry {\n\t\t\tlet result = BlockPoint.claim(now, unspent, wallet, key, category);\n\t\t\ttransaction = result.transaction;\n\t\t\tsourceOutputs = result.sourceOutputs;\n\t\t\ttransaction_hex = binToHex(encodeTransactionBCH(transaction));\n\t\t\tbroadcast(transaction_hex);\n\t\t\ttransactionValid = result.verify === true ? true : false;\n\t\t\tif (result.verify === true) transactionError = '';\n\t\t} catch (error: any) {\n\t\t\ttransaction = undefined;\n\t\t\tsourceOutputs = undefined;\n\t\t\ttransaction_hex = '';\n\t\t\ttransactionValid = false;\n\t\t\ttransactionError = error;\n\t\t}\n\t};\n\n\tonMount(async () => {\n\t\tconst isMainnet = page.url.hostname !== 'vox.cash';\n\t\tBaseWallet.StorageProvider = IndexedDBProvider;\n\t\twallet = isMainnet ? await TestNetWallet.named(`vox`) : await Wallet.named(`vox`);\n\t\tkey = getHdPrivateKey(wallet.mnemonic!, wallet.derivationPath.slice(0, -2), wallet.isTestnet);\n\t\tlet lockcodeResult = cashAddressToLockingBytecode(wallet.getDepositAddress());\n\t\tif (typeof lockcodeResult == 'string') throw lockcodeResult;\n\t\twalletScriptHash = getScriptHash(lockcodeResult.bytecode);\n\n\t\t// Initialize an electrum client.\n\t\telectrumClient = new ElectrumClient(BlockPoint.USER_AGENT, '1.4.1', server);\n\n\t\t// Wait for the client to connect.\n\t\tawait electrumClient.connect();\n\t\t// Set up a callback function to handle new blocks.\n\n\t\t// Listen for notifications.\n\t\telectrumClient.on('notification', handleNotifications);\n\n\t\t// Set up a subscription for new block headers.\n\t\tawait electrumClient.subscribe('blockchain.scripthash.subscribe', scripthash);\n\t\tawait electrumClient.subscribe('blockchain.headers.subscribe');\n\t\tupdateUnspent();\n\t\tupdateWallet();\n\t});\n\n\tonDestroy(async () => {\n\t\tconst electrumClient = new ElectrumClient(BlockPoint.USER_AGENT, '1.4.1', server);\n\t\tawait electrumClient.disconnect();\n\t});\n</script>\n\n<section>\n\t<div class=\"status\">\n\t\t{#if connectionStatus == 'CONNECTED'}\n\t\t\t<img src={CONNECTED} alt={connectionStatus} />\n\t\t{:else}\n\t\t\t<img src={DISCONNECTED} alt=\"Disconnected\" />\n\t\t{/if}\n\t\t<BitauthLink template={BlockPoint.template} />\n\t</div>\n\t<h1>Claim Block Point Rewards</h1>\n\n\t<div class=\"swap\">\n\t\t<div>\n\t\t\t<img width=\"50\" src={bch} alt={baseTicker} />\n\t\t\t<br />\n\t\t\t{sumWallet.toLocaleString()} <b>{baseTicker}</b>\n\t\t</div>\n\t\t<div>\n\t\t\t<img width=\"50\" src={icon} alt={ticker} />\n\t\t\t<br />\n\t\t\t{sumWalletBlockPoint.toLocaleString()} <b>{ticker}</b>\n\t\t</div>\n\t</div>\n\n\t<div class=\"swap\">\n\t\t<button onclick={() => claimAll()}>Claim All Rewards</button>\n\t</div>\n\n\t{#if transaction && transactionValid}\n\t\t<div class=\"swap\">\n\t\t\t<div>\n\t\t\t\t{#if amount > 0}\n\t\t\t\t\tplace: {amount.toLocaleString()} sats\n\t\t\t\t{:else if amount < 0}\n\t\t\t\t\tredeem: {(-amount).toLocaleString()} wrapped sats\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n\t{#if transaction}\n\t\t<Transaction {transaction} {sourceOutputs} {category} />\n\t{/if}\n\t{transactionError}\n\n\t{#if walletUnspent.filter((u) => !u.token_data).filter((u) => u.height > 0).length > 0}\n\t\t<h4>Wallet Unspent Transaction Outputs (coins)</h4>\n\t\t<div class=\"grid\">\n\t\t\t{#each walletUnspent as t, i}\n\t\t\t\t{#if !t.token_data && unspent[i]}\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t{#if Math.floor(((now - t.height) * t.value) / 100000000) > 1}\n\t\t\t\t\t\t\t<button class=\"action\" onclick={() => claimReward(now, unspent[i], t, key, category)}>\n\t\t\t\t\t\t\t\t<img width=\"100\" src={icon} alt=\"bptLogo\" /><br />\n\t\t\t\t\t\t\t\tClaim {t.height > unspent[i].height\n\t\t\t\t\t\t\t\t\t? Math.floor(((now - t.height) * t.value) / 100000000)\n\t\t\t\t\t\t\t\t\t: Math.floor(((now - unspent[i].height) * t.value) / 100000000)} BPT\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t<button class=\"action\" disabled>\n\t\t\t\t\t\t\t\t<img width=\"100\" src={icon} alt=\"bptLogo\" /><br />\n\t\t\t\t\t\t\t\t{t.height > unspent[i].height\n\t\t\t\t\t\t\t\t\t? (((now - t.height) * t.value) / 100000000).toLocaleString(undefined, {\n\t\t\t\t\t\t\t\t\t\t\tminimumFractionDigits: 3\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t: (((now - unspent[i].height) * t.value) / 100000000).toLocaleString(undefined, {\n\t\t\t\t\t\t\t\t\t\t\tminimumFractionDigits: 3\n\t\t\t\t\t\t\t\t\t\t})} BPT\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t{/each}\n\t\t</div>\n\t{:else}\n\t\t<p>No confirmed coins to claim Block Points</p>\n\t{/if}\n\n\t<Readme />\n</section>\n\n<style>\n\t.swap {\n\t\tdisplay: flex;\n\t}\n\t.status {\n\t\ttext-align: end;\n\t}\n\n\t.swap {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\t.swap div {\n\t\tpadding: 20px;\n\t\tjustify-content: center;\n\t\ttext-align: center;\n\t}\n\n\t.swap input {\n\t\tbackground-color: #ddd;\n\t}\n\n\t.action {\n\t\tdisplay: inline-block;\n\t\tborder-radius: 10px;\n\t\tbackground-color: rgba(200, 229, 238, 0.514);\n\t\tcolor: #000000;\n\t\tmargin: 5px;\n\t\tpadding: 10px;\n\t\tfont-weight: 900;\n\t\tfont-size: small;\n\t}\n\n\t.action:disabled {\n\t\tdisplay: inline-block;\n\t\tborder-radius: 10px;\n\t\tbackground-color: #55525569;\n\t\tcolor: #a09999;\n\t\tmargin: 1px;\n\t\tpadding: 0 5px 0 5px;\n\t\tfont-weight: 900;\n\t\tfont-size: small;\n\t}\n\n\t.grid {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tflex-wrap: wrap;\n\t\talign-items: flex-start;\n\t}\n\n\t.grid .row {\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\ttext-align: center;\n\t\tgrid-gap: 0.2rem;\n\t\tmargin: 0 0 0.2rem 0;\n\t}\n\n\t.swap button {\n\t\tbackground-color: #a45eb6; /* Green */\n\t\tborder: none;\n\t\tcolor: white;\n\t\tborder-radius: 20px;\n\t\tpadding: 15px 32px;\n\t\ttext-align: center;\n\t\ttext-decoration: none;\n\t\tdisplay: inline-block;\n\t\tfont-size: 16px;\n\t}\n\t.swap button:hover {\n\t\tbackground-color: #9933b3;\n\t}\n</style>\n"],"names":["prerender","tBPT$1","BPT$1","BPT","hexToBin","tBPT","BlockPoint","packageInfo","template","getLibauthCompiler","createVirtualMachineBCH","data","lockingBytecodeResult","reversed","getScriptHash","prefix","getAddress","utxo","age","bigIntToVmNumber","amount","key","hdPrivateKeyToP2pkhLockingBytecode","privateKey","addressIndex","unlockingData","category","deriveHdPublicKey","contractUtxo","walletUtxo","sourceOutputs","now","fee","inputs","outputs","bptCat","youngerUtxo","config","result","generateTransaction","estimatedFee","getTransactionFees","transaction","tokenValidationResult","verifyTransactionTokens","verify","feeEstimate","sumSourceOutputValue","sumSourceOutputTokenAmounts","tokenDiff","$.template_effect","$0","$.set_text","text","binToHex","$.derived_safe_equal","claimAll","connectionStatus","contractState","transaction_hex","transactionValid","unspent","$.mutable_source","walletUnspent","electrumClient","scripthash","walletScriptHash","sumWalletBlockPoint","sumWallet","isMainnet","page","icon","tbptCat","baseTicker","ticker","server","spent","wallet","transactionError","handleNotifications","d","$.set","ConnectionStatus","updateUnspent","updateWallet","response","walletUnspentIds","$.get","sumUtxoValue","sumTokenAmounts","t","unspentIds","a","b","broadcast","raw_tx","i","claimReward","encodeTransactionBCH","error","onMount","$$_import_BaseWallet","IndexedDBProvider","TestNetWallet","Wallet","getHdPrivateKey","lockcodeResult","cashAddressToLockingBytecode","ElectrumClient","onDestroy","CONNECTED","DISCONNECTED","$$render","consequent","alternate","text_4","consequent_2","consequent_1","alternate_1","consequent_3","consequent_4","$.each","div_7","consequent_5","alternate_2","consequent_6","u","consequent_7","alternate_3","bch"],"mappings":"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"}