{"version":3,"file":"9.COUYH9w4.js","sources":["../../../../../../src/lib/images/tWBCH.svg","../../../../../../src/lib/images/WBCH.svg","../../../../../../../wrap/out/index.js","../../../../../../src/routes/wrap/+page.svelte"],"sourcesContent":["export default \"data:image/svg+xml,%3csvg%20version='1.1'%20viewBox='0%200%2016%2016'%20xmlns='http://www.w3.org/2000/svg'%3e%3cdefs%3e%3clinearGradient%20id='a'%20x1='4.54e-7'%20x2='16'%20y1='8'%20y2='8'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20stop-color='%23feccf2'%20offset='0'/%3e%3cstop%20stop-color='%23ffda95'%20offset='1'/%3e%3c/linearGradient%3e%3c/defs%3e%3ccircle%20cx='8'%20cy='8'%20r='8'%20fill='url(%23a)'%20stroke-width='0'/%3e%3ccircle%20cx='8'%20cy='8'%20r='6'%20fill='%2394ff94'%20stroke-width='0'/%3e%3cpath%20d='m7.96%201.07a6.93%206.93%200%200%200-6.89%206.93%206.93%206.93%200%200%200%206.93%206.93%206.93%206.93%200%200%200%206.93-6.93%206.93%206.93%200%200%200-6.93-6.93%206.93%206.93%200%200%200-0.0371%200zm-0.244%201.94%200.00391%200.00586c0.00188%200.00188%200.0847%200.303%200.186%200.67%200.101%200.366%200.186%200.668%200.189%200.67%200.00188%200.00284%200.0377-2.72e-4%200.082-0.00781%200.392-0.0697%200.847-0.0893%201.11-0.0488%200.633%200.0979%201.02%200.413%201.21%200.998%200.185%200.557%200.0921%201.02-0.283%201.41l-0.0684%200.0723h0.111c0.78%200%201.27%200.37%201.47%201.12%200.122%200.443%200.127%200.856%200.0137%201.2-0.0386%200.119-0.129%200.295-0.205%200.402-0.137%200.193-0.392%200.418-0.656%200.576-0.261%200.156-0.711%200.356-1.02%200.455-0.0282%200.0094-0.0548%200.0196-0.0586%200.0234-0.00376%200.0028%200.067%200.272%200.156%200.598%200.0904%200.327%200.174%200.633%200.187%200.68l0.0234%200.0859-0.402%200.109c-0.22%200.0603-0.405%200.109-0.41%200.109-0.00565%200-0.0918-0.299-0.191-0.666-0.101-0.367-0.183-0.669-0.184-0.67-9.58e-4%20-0.0019-0.136%200.0328-0.299%200.0762-0.163%200.0433-0.31%200.0822-0.326%200.0859-0.0169%200.0028-0.0312%200.012-0.0312%200.0176%200%200.0104%200.015%200.064%200.244%200.896%200.0669%200.244%200.121%200.443%200.119%200.445-9.58e-4%209.58e-4%20-0.185%200.0522-0.408%200.113l-0.404%200.111-0.00977-0.0293c-0.00565-0.016-0.0594-0.209-0.121-0.43-0.184-0.671-0.246-0.895-0.25-0.9-0.00284-0.0019-0.373%200.0977-0.826%200.221-0.453%200.123-0.824%200.224-0.826%200.223-0.00284-0.0028-0.105-0.98-0.105-1.01%200-0.016%200.00573-0.0226%200.0293-0.0273%200.0706-0.0132%200.527-0.136%200.592-0.16%200.0951-0.0358%200.17-0.109%200.191-0.184%200.0264-0.0894%200.0211-0.146-0.0391-0.367-0.0311-0.112-0.132-0.474-0.223-0.805-0.0913-0.331-0.225-0.816-0.297-1.08-0.0716-0.262-0.182-0.663-0.246-0.891-0.0631-0.228-0.132-0.484-0.154-0.57-0.0235-0.0857-0.0542-0.173-0.0684-0.197-0.0414-0.0725-0.105-0.13-0.18-0.166-0.0631-0.032-0.0782-0.0362-0.16-0.0391-0.126-0.00565-0.22%200.015-0.691%200.152-0.0763%200.0217-0.113%200.029-0.115%200.0215-0.00659-0.0188-0.232-0.849-0.234-0.857%200-0.00376%200.0827-0.0313%200.184-0.0586%200.101-0.0282%200.468-0.13%200.818-0.227%200.349-0.096%200.639-0.178%200.643-0.18%200.00376-0.00284-0.0765-0.304-0.178-0.67-0.101-0.365-0.18-0.67-0.178-0.674%200.00188-0.00565%200.0254-0.0149%200.0527-0.0215%200.0282-0.00753%200.208-0.0587%200.402-0.111%200.194-0.0537%200.355-0.0956%200.355-0.0938%209.58e-4%209.42e-4%200.083%200.295%200.182%200.654%200.0998%200.36%200.182%200.656%200.184%200.658%200.00188%200.00188%200.13-0.0329%200.285-0.0781%200.154-0.0452%200.298-0.0862%200.322-0.0938%200.033-0.00942%200.041-0.0161%200.0391-0.0293-0.00188-0.0104-0.081-0.301-0.176-0.648-0.0951-0.346-0.174-0.635-0.174-0.641%200-0.00847%200.809-0.235%200.816-0.229zm0.404%202.43c-0.214%200.00565-0.377%200.0308-0.641%200.0977-0.161%200.0395-0.572%200.159-0.58%200.168-0.00376%200.00376%200.117%200.456%200.404%201.5%200.0226%200.0819%200.0442%200.139%200.0508%200.139%200.00565%200%200.0846-0.0194%200.174-0.043%200.619-0.162%200.957-0.303%201.22-0.51%200.0913-0.0716%200.15-0.135%200.211-0.227%200.0565-0.0857%200.0826-0.153%200.102-0.262%200.0179-0.106%200.00619-0.221-0.0371-0.348-0.096-0.287-0.291-0.446-0.621-0.502-0.0772-0.0122-0.133-0.0145-0.281-0.00977l-0.00195-0.00391zm0.963%202.4c-0.239%200.00911-0.522%200.0561-0.854%200.141-0.213%200.0546-0.654%200.185-0.654%200.195%200%200.00376%200.109%200.408%200.244%200.898s0.246%200.892%200.246%200.895c0%200.00942%200.0198%200.0059%200.219-0.0469%200.874-0.229%201.35-0.443%201.63-0.74%200.0876-0.0923%200.123-0.142%200.168-0.238%200.0508-0.106%200.0655-0.174%200.0645-0.297%200-0.199-0.0736-0.394-0.201-0.529-0.187-0.199-0.465-0.292-0.861-0.277h-0.00195z'%20fill='%23800000'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20version='1.1'%20viewBox='0%200%2016%2016'%20xmlns='http://www.w3.org/2000/svg'%20xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3clinearGradient%20id='a'%20x1='4.54e-7'%20x2='16'%20y1='8'%20y2='8'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20stop-color='%23ccfed8'%20offset='0'/%3e%3cstop%20stop-color='%2395baff'%20offset='1'/%3e%3c/linearGradient%3e%3c/defs%3e%3cg%3e%3ccircle%20cx='8'%20cy='8'%20r='8'%20fill='url(%23a)'%20stroke-width='0'/%3e%3ccircle%20cx='8'%20cy='8'%20r='6'%20fill='%23ffa5bf'%20stroke-width='0'/%3e%3cpath%20d='m7.96%201.07a6.93%206.93%200%200%200-6.89%206.93%206.93%206.93%200%200%200%206.93%206.93%206.93%206.93%200%200%200%206.93-6.93%206.93%206.93%200%200%200-6.93-6.93%206.93%206.93%200%200%200-0.0371%200zm-0.244%201.94%200.00391%200.00586c0.00188%200.00188%200.0847%200.303%200.186%200.67%200.101%200.366%200.186%200.668%200.189%200.67%200.00188%200.00284%200.0377-2.72e-4%200.082-0.00781%200.392-0.0697%200.847-0.0893%201.11-0.0488%200.633%200.0979%201.02%200.413%201.21%200.998%200.185%200.557%200.0921%201.02-0.283%201.41l-0.0684%200.0723h0.111c0.78%200%201.27%200.37%201.47%201.12%200.122%200.443%200.127%200.856%200.0137%201.2-0.0386%200.119-0.129%200.295-0.205%200.402-0.137%200.193-0.392%200.418-0.656%200.576-0.261%200.156-0.711%200.356-1.02%200.455-0.0282%200.0094-0.0548%200.0196-0.0586%200.0234-0.00376%200.0028%200.067%200.272%200.156%200.598%200.0904%200.327%200.174%200.633%200.187%200.68l0.0234%200.0859-0.402%200.109c-0.22%200.0603-0.405%200.109-0.41%200.109-0.00565%200-0.0918-0.299-0.191-0.666-0.101-0.367-0.183-0.669-0.184-0.67-9.58e-4%20-0.0019-0.136%200.0328-0.299%200.0762-0.163%200.0433-0.31%200.0822-0.326%200.0859-0.0169%200.0028-0.0312%200.012-0.0312%200.0176%200%200.0104%200.015%200.064%200.244%200.896%200.0669%200.244%200.121%200.443%200.119%200.445-9.58e-4%209.58e-4%20-0.185%200.0522-0.408%200.113l-0.404%200.111-0.00977-0.0293c-0.00565-0.016-0.0594-0.209-0.121-0.43-0.184-0.671-0.246-0.895-0.25-0.9-0.00284-0.0019-0.373%200.0977-0.826%200.221-0.453%200.123-0.824%200.224-0.826%200.223-0.00284-0.0028-0.105-0.98-0.105-1.01%200-0.016%200.00573-0.0226%200.0293-0.0273%200.0706-0.0132%200.527-0.136%200.592-0.16%200.0951-0.0358%200.17-0.109%200.191-0.184%200.0264-0.0894%200.0211-0.146-0.0391-0.367-0.0311-0.112-0.132-0.474-0.223-0.805-0.0913-0.331-0.225-0.816-0.297-1.08-0.0716-0.262-0.182-0.663-0.246-0.891-0.0631-0.228-0.132-0.484-0.154-0.57-0.0235-0.0857-0.0542-0.173-0.0684-0.197-0.0414-0.0725-0.105-0.13-0.18-0.166-0.0631-0.032-0.0782-0.0362-0.16-0.0391-0.126-0.00565-0.22%200.015-0.691%200.152-0.0763%200.0217-0.113%200.029-0.115%200.0215-0.00659-0.0188-0.232-0.849-0.234-0.857%200-0.00376%200.0827-0.0313%200.184-0.0586%200.101-0.0282%200.468-0.13%200.818-0.227%200.349-0.096%200.639-0.178%200.643-0.18%200.00376-0.00284-0.0765-0.304-0.178-0.67-0.101-0.365-0.18-0.67-0.178-0.674%200.00188-0.00565%200.0254-0.0149%200.0527-0.0215%200.0282-0.00753%200.208-0.0587%200.402-0.111%200.194-0.0537%200.355-0.0956%200.355-0.0938%209.58e-4%209.42e-4%200.083%200.295%200.182%200.654%200.0998%200.36%200.182%200.656%200.184%200.658%200.00188%200.00188%200.13-0.0329%200.285-0.0781%200.154-0.0452%200.298-0.0862%200.322-0.0938%200.033-0.00942%200.041-0.0161%200.0391-0.0293-0.00188-0.0104-0.081-0.301-0.176-0.648-0.0951-0.346-0.174-0.635-0.174-0.641%200-0.00847%200.809-0.235%200.816-0.229zm0.404%202.43c-0.214%200.00565-0.377%200.0308-0.641%200.0977-0.161%200.0395-0.572%200.159-0.58%200.168-0.00376%200.00376%200.117%200.456%200.404%201.5%200.0226%200.0819%200.0442%200.139%200.0508%200.139%200.00565%200%200.0846-0.0194%200.174-0.043%200.619-0.162%200.957-0.303%201.22-0.51%200.0913-0.0716%200.15-0.135%200.211-0.227%200.0565-0.0857%200.0826-0.153%200.102-0.262%200.0179-0.106%200.00619-0.221-0.0371-0.348-0.096-0.287-0.291-0.446-0.621-0.502-0.0772-0.0122-0.133-0.0145-0.281-0.00977l-0.00195-0.00391zm0.963%202.4c-0.239%200.00911-0.522%200.0561-0.854%200.141-0.213%200.0546-0.654%200.185-0.654%200.195%200%200.00376%200.109%200.408%200.244%200.898%200.135%200.49%200.246%200.892%200.246%200.895%200%200.00942%200.0198%200.0059%200.219-0.0469%200.874-0.229%201.35-0.443%201.63-0.74%200.0876-0.0923%200.123-0.142%200.168-0.238%200.0508-0.106%200.0655-0.174%200.0645-0.297%200-0.199-0.0736-0.394-0.201-0.529-0.187-0.199-0.465-0.292-0.861-0.277h-0.00195z'%20fill='%234c7e7c'/%3e%3c/g%3e%3c/svg%3e\"","import template from './template.v1.json' with { type: \"json\" };\nimport packageInfo from '../package.json' with { type: \"json\" };\nimport { binToHex, createVirtualMachineBCH, deriveHdPublicKey, generateTransaction, hdPrivateKeyToP2pkhLockingBytecode, hexToBin, verifyTransactionTokens } from '@bitauth/libauth';\nimport { getTransactionFees, getAddress, getLibauthCompiler, getScriptHash, sumSourceOutputValue, sumSourceOutputTokenAmounts } from '@unspent/tau';\nexport const WBCH = hexToBin('ff4d6e4b90aa8158d39c5dc874fd9411af1ac3b5ed6f354755e8362a0d02c6b3');\nexport const tWBCH = hexToBin('bb61cd7a6c8a3a3742d965dc7ac73c1117382a5c8930b68338deb881f75c0214');\nexport default class Wrap {\n    static USER_AGENT = packageInfo.name;\n    static tokenAware = true;\n    static template = template;\n    static compiler = getLibauthCompiler(this.template);\n    static vm = createVirtualMachineBCH();\n    static getLockingBytecode(data = {}) {\n        const lockingBytecodeResult = this.compiler.generateBytecode({\n            data: data,\n            scriptId: 'lock'\n        });\n        if (!lockingBytecodeResult.success)\n            throw new Error('Failed to generate bytecode, script: , ' + JSON.stringify(lockingBytecodeResult, null, '  '));\n        return lockingBytecodeResult.bytecode;\n    }\n    static getScriptHash(reversed = true) {\n        return getScriptHash(this.getLockingBytecode(), reversed);\n    }\n    /**\n     * Get cashaddress\n     *\n     * @param prefix - cashaddress prefix.\n     * @throws {Error} if transaction generation fails.\n     * @returns a cashaddress.\n     */\n    static getAddress(prefix = \"bitcoincash\") {\n        return getAddress(this.getLockingBytecode(), prefix, this.tokenAware);\n    }\n    static getSourceOutput(utxo) {\n        return {\n            lockingBytecode: this.getLockingBytecode(),\n            valueSatoshis: BigInt(utxo.value),\n            token: {\n                category: hexToBin(utxo.token_data.category),\n                amount: BigInt(utxo.token_data?.amount)\n            }\n        };\n    }\n    static getInput(utxo) {\n        return {\n            outpointIndex: utxo.tx_pos,\n            outpointTransactionHash: hexToBin(utxo.tx_hash),\n            sequenceNumber: 0,\n            unlockingBytecode: {\n                compiler: this.compiler,\n                script: 'unlock'\n            },\n        };\n    }\n    static getOutput(utxo, amount) {\n        return {\n            lockingBytecode: {\n                compiler: this.compiler,\n                script: 'lock'\n            },\n            valueSatoshis: BigInt(utxo.value) + amount,\n            token: {\n                category: hexToBin(utxo.token_data.category),\n                amount: BigInt(utxo.token_data?.amount) - BigInt(amount)\n            }\n        };\n    }\n    static getWalletSourceOutput(utxo, key) {\n        const lockingBytecode = key ? hdPrivateKeyToP2pkhLockingBytecode({\n            addressIndex: 0,\n            hdPrivateKey: key\n        }) : Uint8Array.from(Array(33));\n        return {\n            lockingBytecode: lockingBytecode,\n            valueSatoshis: BigInt(utxo.value),\n            token: utxo.token_data ? {\n                category: hexToBin(utxo.token_data.category),\n                amount: BigInt(utxo.token_data?.amount)\n            } : undefined\n        };\n    }\n    static getWalletInput(utxo, privateKey, addressIndex = 0) {\n        let unlockingData = privateKey ? {\n            compiler: this.compiler,\n            data: {\n                hdKeys: {\n                    addressIndex: addressIndex,\n                    hdPrivateKeys: {\n                        'wallet': privateKey\n                    },\n                }\n            },\n            script: 'wallet_unlock',\n            valueSatoshis: BigInt(utxo.value),\n        } : Uint8Array.from(Array());\n        if (utxo.token_data) {\n            // @ts-ignore\n            unlockingData.token = {\n                amount: BigInt(utxo.token_data.amount),\n                category: hexToBin(utxo.token_data.category)\n            };\n        }\n        return {\n            outpointIndex: utxo.tx_pos,\n            outpointTransactionHash: hexToBin(utxo.tx_hash),\n            sequenceNumber: 0,\n            unlockingBytecode: unlockingData,\n        };\n    }\n    static getWrappedOutput(amount, privateKey, addressIndex = 0, category = WBCH) {\n        const lockingBytecode = privateKey ? {\n            compiler: this.compiler,\n            data: {\n                hdKeys: {\n                    addressIndex: addressIndex,\n                    hdPublicKeys: {\n                        'wallet': deriveHdPublicKey(privateKey).hdPublicKey\n                    },\n                },\n            },\n            script: 'wallet_lock'\n        } : Uint8Array.from(Array(33));\n        return {\n            lockingBytecode: lockingBytecode,\n            valueSatoshis: 800n,\n            token: {\n                category: category,\n                amount: amount\n            }\n        };\n    }\n    static getChangeOutput(amount, privateKey, addressIndex = 0) {\n        const lockingBytecode = privateKey ? {\n            compiler: this.compiler,\n            data: {\n                hdKeys: {\n                    addressIndex: addressIndex,\n                    hdPublicKeys: {\n                        'wallet': deriveHdPublicKey(privateKey).hdPublicKey\n                    },\n                },\n            },\n            script: 'wallet_lock'\n        } : Uint8Array.from(Array(33));\n        return {\n            lockingBytecode: lockingBytecode,\n            valueSatoshis: amount\n        };\n    }\n    /**\n     * Get source outputs, transform contract & wallet outpoints for spending verification.\n     *\n     * @param contractUtxo - contract outputs to use as input.\n     * @param walletUtxos - wallet outputs to use as input.\n     * @param privateKey - private key to sign transaction wallet inputs.\n     *\n     * @returns a transaction template.\n     */\n    static getSourceOutputs(contractUtxo, walletUtxos, privateKey) {\n        const sourceOutputs = [];\n        sourceOutputs.push(this.getSourceOutput(contractUtxo));\n        sourceOutputs.push(...walletUtxos.map(u => { return this.getWalletSourceOutput(u, privateKey); }));\n        return sourceOutputs;\n    }\n    static getVaultLayers(utxos, amount, category, sourceOutputs = []) {\n        let inputs = [];\n        let outputs = [];\n        utxos = utxos.filter(u => u.token_data?.category == binToHex(category));\n        if (amount < 0)\n            utxos = utxos.filter(u => u.value > 800);\n        if (utxos.length == 0)\n            throw Error(\"no vault utxos left, maximum recursion depth reached.\");\n        const randomIdx = Math.floor(Math.random() * utxos.length);\n        const randomUtxo = utxos[randomIdx];\n        // remove the random utxo in place\n        utxos.splice(randomIdx, 1);\n        // Try to satisfy the swap with another utxos\n        inputs.push(this.getInput(randomUtxo));\n        sourceOutputs.push(this.getSourceOutput(randomUtxo));\n        if (\n        // Redeeming WBCH for BCH and this thread can satisfy the swap\n        (amount < 0 && -(randomUtxo?.value) < amount) ||\n            (amount > 0 && (BigInt(randomUtxo?.token_data?.amount) > amount))) {\n            outputs.push(this.getOutput(randomUtxo, BigInt(amount)));\n        }\n        else {\n            if (amount < 0 && amount < -(randomUtxo?.value - 800)) {\n                // liquidate sats on this utxo \n                outputs.push(this.getOutput(randomUtxo, -BigInt(randomUtxo?.value - 800)));\n                amount += randomUtxo?.value - 800;\n            }\n            // and try again\n            let nextTry = this.getVaultLayers([...utxos], amount, category, [...sourceOutputs]);\n            inputs.push(...nextTry.inputs);\n            outputs.push(...nextTry.outputs);\n            sourceOutputs = nextTry.sourceOutputs;\n        }\n        return { inputs, outputs, sourceOutputs };\n    }\n    static getWalletLayers(utxos, amount, privateKey, category, sourceOutputs = []) {\n        let inputs = [];\n        let outputs = [];\n        // Only use straight sat utxos if placing BCH\n        if (amount > 0)\n            utxos = utxos.filter(u => !u.token_data);\n        if (amount < 0)\n            utxos = utxos.filter(u => u.token_data?.category == binToHex(category));\n        if (utxos.length == 0)\n            throw Error(\"no wallet utxos left, maximum recursion depth reached.\");\n        // get a random utxo.\n        const randomIdx = Math.floor(Math.random() * utxos.length);\n        const randomUtxo = utxos[randomIdx];\n        // remove the random utxo in place\n        utxos.splice(randomIdx, 1);\n        // spend the utxo\n        inputs.push(this.getWalletInput(randomUtxo, privateKey));\n        sourceOutputs.push(this.getWalletSourceOutput(randomUtxo, privateKey));\n        let sumSats = sumSourceOutputValue(sourceOutputs);\n        let sumWSats = sumSourceOutputTokenAmounts(sourceOutputs, binToHex(category));\n        if (\n        // Redeeming WBCH for BCH, and token amount is sufficient\n        (amount < 0 && sumWSats >= -amount) ||\n            // Or if placing BCH for WBCH, and utxo value is sufficient\n            (amount > 0 && sumSats > amount)) {\n            // This utxo finally satisfied the swap \n            // There is WBCH placed\n            if (amount > 0) {\n                outputs.push(this.getWrappedOutput(amount, privateKey, 0, category));\n            }\n            if (amount < 0) {\n                outputs.push(this.getWrappedOutput(sumWSats + amount, privateKey, 0, category));\n            }\n            let satsOut = (sumSats) - (amount + 800n);\n            outputs.push(this.getChangeOutput(satsOut, privateKey));\n        }\n        // Liquidate this utxo and try again\n        else {\n            let nextTry = this.getWalletLayers([...utxos], amount, privateKey, category, [...sourceOutputs]);\n            inputs.push(...nextTry.inputs);\n            outputs.push(...nextTry.outputs);\n            sourceOutputs = nextTry.sourceOutputs;\n        }\n        return { inputs, outputs, sourceOutputs };\n    }\n    /**\n     * Wrap (+) or Unwrap (-) some amount of WBCH.\n     *\n     * @param amount     - amount to wrap (satoshis), negative to unwrap.\n     * @param contractUtxo - contract outputs to use as input.\n     * @param walletUtxos - wallet outputs to use as input.\n     * @param privateKey - private key to sign transaction wallet inputs.\n     * @param fee - transaction fee to pay (per byte).\n     *\n     * @throws {Error} if transaction generation fails.\n     * @returns a transaction template.\n     */\n    static swap(amount, contractUtxos, walletUtxos, privateKey, category, fee = 1) {\n        const inputs = [];\n        const outputs = [];\n        let wbchCat = category ? hexToBin(category) : WBCH;\n        let config = {\n            locktime: 0,\n            version: 2,\n            inputs,\n            outputs\n        };\n        // if placing BCH for WBCH, don't use utxos with tokens\n        walletUtxos = walletUtxos.filter(u => u.token_data?.category == category || !u.token_data);\n        let vaultLayers = this.getVaultLayers([...contractUtxos], amount, wbchCat);\n        config.inputs.push(...vaultLayers.inputs);\n        config.outputs.push(...vaultLayers.outputs);\n        let sourceOutputs = vaultLayers.sourceOutputs;\n        let walletLayers = this.getWalletLayers([...walletUtxos], BigInt(amount), privateKey, wbchCat);\n        config.inputs.push(...walletLayers.inputs);\n        config.outputs.push(...walletLayers.outputs);\n        sourceOutputs.push(...walletLayers.sourceOutputs);\n        let result = generateTransaction(config);\n        if (!result.success)\n            throw new Error('generate transaction failed!, errors: ' + JSON.stringify(result.errors, null, '  '));\n        const estimatedFee = getTransactionFees(result.transaction, fee);\n        const lastIdx = config.outputs.length - 1;\n        config.outputs[lastIdx].valueSatoshis = config.outputs[lastIdx].valueSatoshis - estimatedFee;\n        result = generateTransaction(config);\n        if (!result.success)\n            throw new Error('generate transaction failed!, errors: ' + JSON.stringify(result.errors, null, '  '));\n        const transaction = result.transaction;\n        const tokenValidationResult = verifyTransactionTokens(transaction, sourceOutputs);\n        if (tokenValidationResult !== true && fee > 0)\n            throw tokenValidationResult;\n        let verify = this.vm.verify({\n            sourceOutputs: sourceOutputs,\n            transaction: transaction,\n        });\n        let feeEstimate = sumSourceOutputValue(sourceOutputs) - sumSourceOutputValue(transaction.outputs);\n        if (feeEstimate > 5000)\n            verify = `Excessive fees ${feeEstimate}`;\n        if (sumSourceOutputTokenAmounts(sourceOutputs, category) == 0n)\n            verify = `Error checking token input`;\n        let tokenDiff = sumSourceOutputTokenAmounts(sourceOutputs, category) -\n            sumSourceOutputTokenAmounts(transaction.outputs, category);\n        if (tokenDiff !== 0n)\n            verify = `Swapping should not create destroy tokens, token difference: ${tokenDiff}`;\n        return {\n            sourceOutputs: sourceOutputs,\n            transaction: transaction,\n            verify: verify\n        };\n    }\n}\n//# sourceMappingURL=index.js.map","<script lang=\"ts\">\n\timport { onMount, onDestroy } from 'svelte';\n\timport { page } from '$app/state';\n\n\timport { binToHex, cashAddressToLockingBytecode, encodeTransactionBCH } from '@bitauth/libauth';\n\n\timport bch from '$lib/images/BCH.svg';\n\timport tWBCH from '$lib/images/tWBCH.svg';\n\timport WBCH from '$lib/images/WBCH.svg';\n\n\timport { ElectrumClient, ConnectionStatus } from '@electrum-cash/network';\n\n\timport { IndexedDBProvider } from '@mainnet-cash/indexeddb-storage';\n\timport { BaseWallet, Wallet, TestNetWallet, hexToBin } from 'mainnet-js';\n\n\timport { sumUtxoValue, sumTokenAmounts, getScriptHash, getHdPrivateKey } from '@unspent/tau';\n\timport Wrap from '@unspent/wrap';\n\timport { WBCH as wbchCat, tWBCH as twbchCat } from '@unspent/wrap';\n\n\timport Readme from './README.md';\n\timport BitauthLink from '$lib/BitauthLink.svelte';\n\timport Transaction from '$lib/Transaction.svelte';\n\timport CONNECTED from '$lib/images/connected.svg';\n\timport DISCONNECTED from '$lib/images/disconnected.svg';\n\n\tlet connectionStatus = $state('');\n\n\tlet transaction_hex = '';\n\tlet transaction: any = $state(undefined);\n\tlet transactionValid = $state(false);\n\tlet sourceOutputs: any = undefined;\n\n\tlet unspent: any[] = $state([]);\n\tlet walletUnspent: any[] = $state([]);\n\tlet key = '';\n\tlet electrumClient: any;\n\tlet timer: any;\n\tlet scripthash = $state('');\n\tlet walletScriptHash = $state('');\n\tlet sumVaultWrapped = $state(0n);\n\tlet sumVault = $state(0);\n\n\tlet sumWalletWrapped = $state(0n);\n\tlet sumWallet = $state(0);\n\n\tscripthash = Wrap.getScriptHash();\n\tlet contractState = '';\n\n\tconst isMainnet = page.url.hostname == 'vox.cash';\n\tconst icon = isMainnet ? WBCH : tWBCH;\n\tconst category = isMainnet ? binToHex(wbchCat) : binToHex(twbchCat);\n\tconst baseTicker = isMainnet ? 'BCH' : 'tBCH';\n\tconst ticker = isMainnet ? 'WBCH' : 'tWBCH';\n\tconst prefix = isMainnet ? 'bitcoincash' : 'bchtest';\n\tconst server = isMainnet ? 'bch.imaginary.cash' : 'chipnet.bch.ninja';\n\n\tlet spent = new Set();\n\n\tlet amount = $state(0);\n\tlet wallet: any;\n\tlet transactionError: string | boolean = $state('');\n\n\tconst debounceUpdateWallet = () => {\n\t\tclearTimeout(timer);\n\t\ttimer = setTimeout(() => {\n\t\t\tupdateWallet();\n\t\t\tupdateUnspent();\n\t\t}, 1500);\n\t};\n\n\tconst handleNotifications = function (data: any) {\n\t\tif (data.method === 'blockchain.scripthash.subscribe') {\n\t\t\tif (data.params[1] !== contractState) {\n\t\t\t\tcontractState = data.params[1];\n\t\t\t\tconnectionStatus = ConnectionStatus[electrumClient.status];\n\t\t\t\tamount = 0;\n\t\t\t\tdebounceUpdateWallet();\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log(data);\n\t\t}\n\t};\n\n\tconst updateWallet = async function () {\n\t\tlet response = await electrumClient.request(\n\t\t\t'blockchain.scripthash.listunspent',\n\t\t\twalletScriptHash,\n\t\t\t'include_tokens'\n\t\t);\n\t\tif (response instanceof Error) throw response;\n\t\tlet walletUnspentIds = new Set(response.map((utxo: any) => `${utxo.tx_hash}\":\"${utxo.tx_pos}`));\n\t\tif (walletUnspent.length == 0 || spent.intersection(walletUnspentIds).size == 0) {\n\t\t\twalletUnspent = response;\n\t\t}\n\t\tsumWallet = sumUtxoValue(walletUnspent, true);\n\t\tsumWalletWrapped = sumTokenAmounts(walletUnspent, category);\n\t};\n\n\tconst updateUnspent = async function () {\n\t\tlet response = await electrumClient.request(\n\t\t\t'blockchain.scripthash.listunspent',\n\t\t\tscripthash,\n\t\t\t'include_tokens'\n\t\t);\n\t\tif (response instanceof Error) throw response;\n\t\tlet unspentIds = new Set(response.map((utxo: any) => `${utxo.tx_hash}\":\"${utxo.tx_pos}`));\n\t\tif (unspent.length == 0 || spent.intersection(unspentIds).size == 0) {\n\t\t\tunspent = response;\n\t\t}\n\t\tunspent = unspent.filter((t) => t.token_data && t.token_data.category == category);\n\t\tsumVault = sumUtxoValue(unspent, true);\n\t\tsumVaultWrapped = sumTokenAmounts(unspent, category);\n\t};\n\n\tconst broadcast = async function (raw_tx: string) {\n\t\tlet response = await electrumClient.request('blockchain.transaction.broadcast', raw_tx);\n\t\tif (response instanceof Error) {\n\t\t\tconnectionStatus = ConnectionStatus[electrumClient.status];\n\t\t\tthrow response;\n\t\t}\n\t\tresponse as any[];\n\t};\n\n\tconst updateSwap = function () {\n\t\ttry {\n\t\t\tlet result = Wrap.swap(amount, unspent, walletUnspent, key, category);\n\t\t\ttransaction = result.transaction;\n\t\t\tsourceOutputs = result.sourceOutputs;\n\t\t\ttransaction_hex = binToHex(encodeTransactionBCH(transaction));\n\t\t\ttransactionValid = result.verify === true ? true : false;\n\t\t\tif (result.verify === true) transactionError = '';\n\t\t} catch (error: any) {\n\t\t\ttransaction = undefined;\n\t\t\tsourceOutputs = undefined;\n\t\t\ttransaction_hex = '';\n\t\t\ttransactionValid = false;\n\t\t\ttransactionError = error;\n\t\t}\n\t};\n\n\tonMount(async () => {\n\n\t\tBaseWallet.StorageProvider = IndexedDBProvider;\n\t\twallet = isMainnet ? await Wallet.named(`vox`) : await TestNetWallet.named(`vox`) ;\n\t\tkey = getHdPrivateKey(wallet.mnemonic!, wallet.derivationPath.slice(0, -2), wallet.isTestnet);\n\t\tlet bytecodeResult = cashAddressToLockingBytecode(wallet.getDepositAddress());\n\t\tif (typeof bytecodeResult == 'string') throw bytecodeResult;\n\t\twalletScriptHash = getScriptHash(bytecodeResult.bytecode);\n\n\t\t// Initialize an electrum client.\n\t\telectrumClient = new ElectrumClient('unspent/wrap', '1.4.1', server);\n\n\t\t// Wait for the client to connect.\n\t\tawait electrumClient.connect();\n\t\t// Set up a callback function to handle new blocks.\n\n\t\t// Listen for notifications.\n\t\telectrumClient.on('notification', handleNotifications);\n\n\t\t// Set up a subscription for new block headers.\n\t\tawait electrumClient.subscribe('blockchain.scripthash.subscribe', scripthash);\n\t\tawait electrumClient.subscribe('blockchain.scripthash.subscribe', walletScriptHash);\n\t\tupdateUnspent();\n\t\tupdateWallet();\n\t});\n\n\tonDestroy(async () => {\n\t\tawait electrumClient.disconnect();\n\t});\n</script>\n\n<section>\n\t<div class=\"status\">\n\t\t<BitauthLink template={Wrap.template} />\n\t\t{#if connectionStatus == 'CONNECTED'}\n\t\t\t<img src={CONNECTED} alt={connectionStatus} />\n\t\t{:else}\n\t\t\t<img src={DISCONNECTED} alt=\"Disconnected\" />\n\t\t{/if}\n\t</div>\n\t<h1>Wrap Bitcoin Cash as a CashToken</h1>\n\n\t<div class=\"swap\">\n\t\t<div>\n\t\t\t<img width=\"50\" src={bch} alt={baseTicker} />\n\n\t\t\t<br />\n\t\t\t{sumWallet.toLocaleString()} sats {baseTicker}\n\t\t</div>\n\t\t<div>\n\t\t\t<img width=\"50\" src={icon} alt={ticker} />\n\t\t\t<br />\n\t\t\t{sumWalletWrapped.toLocaleString()} sats {ticker}\n\t\t</div>\n\t</div>\n\t<div class=\"swap\">\n\t\t<input\n\t\t\ttype=\"range\"\n\t\t\tbind:value={amount}\n\t\t\tstep=\"1000\"\n\t\t\tonchange={() => updateSwap()}\n\t\t\tmin={Number(-sumWalletWrapped)}\n\t\t\tmax={sumWallet - 2000}\n\t\t/>\n\t</div>\n\n\t{#if transaction && transactionValid}\n\t\t<div class=\"swap\">\n\t\t\t<div>\n\t\t\t\t{#if amount > 0}\n\t\t\t\t\tplace: {amount.toLocaleString()} sats\n\t\t\t\t{:else if amount < 0}\n\t\t\t\t\tredeem: {(-amount).toLocaleString()} wrapped sats\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"swap\">\n\t\t\t<button onclick={() => broadcast(transaction_hex)}>Broadcast</button>\n\t\t</div>\n\t{/if}\n\t<!-- {#if transaction}\n\t\t<Transaction {transaction} {sourceOutputs} />\n\t{/if} -->\n\t{transactionError}\n\n\t<!-- <div class=\"grid\">\n\t\t{#if walletUnspent.length > 0}\n\t\t\t<h4>Wallet Unspent Transaction Outputs (coins)</h4>\n\t\t\t<table>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr class=\"header\">\n\t\t\t\t\t\t<td>BCH</td>\n\t\t\t\t\t\t<td>WBCH</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class=\"units\">\n\t\t\t\t\t\t<td class=\"r\">sats </td>\n\t\t\t\t\t\t<td class=\"r\">sats </td>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\n\t\t\t\t<tbody>\n\t\t\t\t\t{#each walletUnspent as t}\n\t\t\t\t\t\t{#if (t.token_data && t.token_data.category == category) || !t.token_data}\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td class=\"sats\">\n\t\t\t\t\t\t\t\t\t{Number(t.value - 800).toLocaleString()}\n\t\t\t\t\t\t\t\t\t<img width=\"15\" src={bch} alt=\"bchLogo\" />\n\t\t\t\t\t\t\t\t</td>\n\n\t\t\t\t\t\t\t\t<td class=\"sats\">\n\t\t\t\t\t\t\t\t\t{#if t.token_data}\n\t\t\t\t\t\t\t\t\t\t{Number(t.token_data.amount).toLocaleString()}\n\t\t\t\t\t\t\t\t\t\t<img width=\"15\" src={icon} alt=\"wbchLogo\" />\n\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{/each}\n\t\t\t\t\t<tr style=\"border-top: solid thin;\">\n\t\t\t\t\t\t<td class=\"r\">\n\t\t\t\t\t\t\t<b>{sumWallet.toLocaleString()} </b>\n\t\t\t\t\t\t\t<img width=\"15\" src={bch} alt=\"bchLogo\" />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td class=\"r\">\n\t\t\t\t\t\t\t<b>{Number(sumWalletWrapped).toLocaleString()} </b>\n\t\t\t\t\t\t\t<img width=\"15\" src={icon} alt=\"wbchLogo\" />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t{:else if connectionStatus != 'CONNECTED'}\n\t\t\t<p>No connection ?</p>\n\n\t\t\t<div class=\"swap\">\n\t\t\t\t<button onclick={() => reconnect()}>Reconnect</button>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t<p>Wallet has no coins or wrapped coins to swap?</p>\n\t\t{/if}\n\t</div> -->\n\n\t<!-- <div class=\"grid\">\n\t\t{#if unspent.length > 0}\n\t\t\t<h4>{ticker} Vault Threads</h4>\n\n\t\t\t<table>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr class=\"header\">\n\t\t\t\t\t\t<td>BCH</td>\n\t\t\t\t\t\t<td>WBCH</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class=\"units\">\n\t\t\t\t\t\t<td class=\"r\">sats </td>\n\t\t\t\t\t\t<td class=\"r\">sats </td>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\n\t\t\t\t<tbody>\n\t\t\t\t\t{#each unspent as t}\n\t\t\t\t\t\t{#if t.token_data && t.token_data.category == category}\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td class=\"sats\">\n\t\t\t\t\t\t\t\t\t{Number(t.value - 800).toLocaleString()}\n\t\t\t\t\t\t\t\t\t<img width=\"15\" src={bch} alt=\"bchLogo\" />\n\t\t\t\t\t\t\t\t</td>\n\n\t\t\t\t\t\t\t\t<td class=\"sats\">\n\t\t\t\t\t\t\t\t\t{Number(t.token_data.amount).toLocaleString()}\n\t\t\t\t\t\t\t\t\t<img width=\"15\" src={icon} alt=\"wbchLogo\" />\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{/each}\n\t\t\t\t\t<tr style=\"border-top: solid thin;\">\n\t\t\t\t\t\t<td class=\"r\">\n\t\t\t\t\t\t\t<b>{sumVault.toLocaleString()} </b>\n\t\t\t\t\t\t\t<img width=\"15\" src={bch} alt=\"bchLogo\" />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td class=\"r\">\n\t\t\t\t\t\t\t<b>{Number(sumVaultWrapped).toLocaleString()} </b>\n\t\t\t\t\t\t\t<img width=\"15\" src={icon} alt=\"wbchLogo\" />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t{:else}\n\t\t\t<p>... getting wrapped vault threads.</p>\n\t\t{/if}\n\t</div> -->\n\n\t<Readme />\n</section>\n\n<style>\n\t.swap {\n\t\tdisplay: flex;\n\t}\n\t.swap input {\n\t\twidth: 90%;\n\t}\n\t.status {\n\t\ttext-align: end;\n\t}\n\n\tthead tr td {\n\t\tborder: 2px ridge rgba(247, 202, 248, 0.6);\n\t\tbackground-color: #ffffff5b;\n\t}\n\n\tthead tr:nth-child(odd) {\n\t\ttext-align: center;\n\n\t\tfont-weight: 900;\n\t}\n\ttbody tr:nth-child(odd) {\n\t\tbackground-color: #ff33cc1f;\n\t}\n\ttbody tr:nth-child(even) {\n\t\tbackground-color: #e495e41a;\n\t}\n\t.r {\n\t\ttext-align: right;\n\t}\n\t.sats {\n\t\ttext-align: right;\n\t\tfont-weight: 300;\n\t\tfont-style: italic;\n\t}\n\n\ttbody tr td {\n\t\tborder: 2px ridge rgba(247, 202, 248, 0.6);\n\t}\n\n\t.swap {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\t.swap div {\n\t\tpadding: 20px;\n\t\tjustify-content: center;\n\t\ttext-align: center;\n\t}\n\n\t.swap input {\n\t\tbackground-color: #ddd;\n\t}\n\n\t.swap button {\n\t\tbackground-color: #a45eb6; /* Green */\n\t\tborder: none;\n\t\tcolor: white;\n\t\tborder-radius: 20px;\n\t\tpadding: 15px 32px;\n\t\ttext-align: center;\n\t\ttext-decoration: none;\n\t\tdisplay: inline-block;\n\t\tfont-size: 16px;\n\t}\n\t.swap button:hover {\n\t\tbackground-color: #9933b3;\n\t}\n</style>\n"],"names":["tWBCH$1","WBCH$1","WBCH","hexToBin","tWBCH","Wrap","packageInfo","template","getLibauthCompiler","createVirtualMachineBCH","data","lockingBytecodeResult","reversed","getScriptHash","prefix","getAddress","utxo","amount","key","hdPrivateKeyToP2pkhLockingBytecode","privateKey","addressIndex","unlockingData","category","deriveHdPublicKey","contractUtxo","walletUtxos","sourceOutputs","u","utxos","inputs","outputs","binToHex","randomIdx","randomUtxo","nextTry","sumSats","sumSourceOutputValue","sumWSats","sumSourceOutputTokenAmounts","satsOut","contractUtxos","fee","wbchCat","config","vaultLayers","walletLayers","result","generateTransaction","estimatedFee","getTransactionFees","lastIdx","transaction","tokenValidationResult","verifyTransactionTokens","verify","feeEstimate","tokenDiff","updateSwap","connectionStatus","transaction_hex","transactionValid","unspent","$.state","$.proxy","walletUnspent","electrumClient","timer","scripthash","walletScriptHash","sumVaultWrapped","sumVault","sumWalletWrapped","sumWallet","contractState","isMainnet","page","icon","twbchCat","baseTicker","ticker","server","spent","wallet","transactionError","debounceUpdateWallet","updateWallet","updateUnspent","handleNotifications","$.set","ConnectionStatus","response","$.get","walletUnspentIds","sumUtxoValue","sumTokenAmounts","unspentIds","t","broadcast","raw_tx","encodeTransactionBCH","error","onMount","BaseWallet","IndexedDBProvider","Wallet","TestNetWallet","getHdPrivateKey","bytecodeResult","cashAddressToLockingBytecode","ElectrumClient","onDestroy","CONNECTED","DISCONNECTED","$$render","consequent","alternate","$.template_effect","$0","$.set_text","text_2","consequent_2","consequent_1","alternate_1","button","consequent_3","bch","$.set_attribute","input","$.bind_value","$$value"],"mappings":"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"}