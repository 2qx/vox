{"version":3,"file":"5Xlugptp.js","sources":["../../../../../../../../node_modules/.pnpm/svelte@5.33.18/node_modules/svelte/src/internal/client/dom/elements/class.js","../../../../../../../common/out/constant.js","../../../../../../../common/out/batch.js","../../../../../../src/lib/images/trash.svg","../../../../../../src/lib/images/likes.svg","../../../../../../src/lib/ChatPost.svelte","../../../../../../src/lib/Chat.svelte"],"sourcesContent":["import { to_class } from '../../../shared/attributes.js';\nimport { hydrating } from '../hydration.js';\n\n/**\n * @param {Element} dom\n * @param {boolean | number} is_html\n * @param {string | null} value\n * @param {string} [hash]\n * @param {Record<string, any>} [prev_classes]\n * @param {Record<string, any>} [next_classes]\n * @returns {Record<string, boolean> | undefined}\n */\nexport function set_class(dom, is_html, value, hash, prev_classes, next_classes) {\n\t// @ts-expect-error need to add __className to patched prototype\n\tvar prev = dom.__className;\n\n\tif (\n\t\thydrating ||\n\t\tprev !== value ||\n\t\tprev === undefined // for edge case of `class={undefined}`\n\t) {\n\t\tvar next_class_name = to_class(value, hash, next_classes);\n\n\t\tif (!hydrating || next_class_name !== dom.getAttribute('class')) {\n\t\t\t// Removing the attribute when the value is only an empty string causes\n\t\t\t// performance issues vs simply making the className an empty string. So\n\t\t\t// we should only remove the class if the value is nullish\n\t\t\t// and there no hash/directives :\n\t\t\tif (next_class_name == null) {\n\t\t\t\tdom.removeAttribute('class');\n\t\t\t} else if (is_html) {\n\t\t\t\tdom.className = next_class_name;\n\t\t\t} else {\n\t\t\t\tdom.setAttribute('class', next_class_name);\n\t\t\t}\n\t\t}\n\n\t\t// @ts-expect-error need to add __className to patched prototype\n\t\tdom.__className = value;\n\t} else if (next_classes && prev_classes !== next_classes) {\n\t\tfor (var key in next_classes) {\n\t\t\tvar is_present = !!next_classes[key];\n\n\t\t\tif (prev_classes == null || is_present !== !!prev_classes[key]) {\n\t\t\t\tdom.classList.toggle(key, is_present);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn next_classes;\n}\n","export const DEFAULT_CONCURRENCY = 8;\n//# sourceMappingURL=constant.js.map","import { DEFAULT_CONCURRENCY } from \"./constant.js\";\n/**\n * Same as Promise.all(items.map(item => task(item))), but it waits for\n * the first {batchSize} promises to finish before starting the next batch.\n *\n * @template A\n * @template B\n * @param {function(A): B} task The task to run for each item.\n * @param {A[]} items Arguments to pass to the task for each call.\n * @param {int} batchSize\n * @returns {Promise<B[]>}\n */\nexport async function promiseAllInBatches(task, items, batchSize = DEFAULT_CONCURRENCY) {\n    let position = 0;\n    let results = [];\n    while (position < items.length) {\n        const itemsForBatch = items.slice(position, position + batchSize);\n        results = [...results, ...await Promise.all(itemsForBatch.map((item) => task(item)))];\n        position += batchSize;\n    }\n    return results;\n}\nexport async function getTransactionWrap(args) {\n    let result = await args[0].request('blockchain.transaction.get', args[1], false);\n    return result;\n}\nexport async function getAllTransactions(electrumClient, tx_hashes) {\n    return promiseAllInBatches(getTransactionWrap, tx_hashes.map(tx_hash => [electrumClient, tx_hash]));\n}\n//# sourceMappingURL=batch.js.map","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20height='24px'%20viewBox='0%20-960%20960%20960'%20width='15px'%20fill='%23000'%3e%3cpath%20d='M280-120q-33%200-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0%2033-23.5%2056.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160%200h80v-360h-80v360ZM280-720v520-520Z'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20height='48px'%20viewBox='0%20-960%20960%20960'%20width='48px'%20fill='%23888'%3e%3cpath%20d='M272-120v-512l278-288%2058%2046-52%20242h359v171L767-120H272Zm60-60h397l126-299v-93H482l53-249-203%20214v427Zm0-427v427-427ZM79-120v-512h193v60H139v392h133v60H79Z'/%3e%3c/svg%3e\"","<script>\n\timport { blo } from 'blo';\n\timport likesIcon from '$lib/images/likes.svg';\n\n\tlet showMore = $state(false);\n    const TRUNCATE = 400;\n\tlet {\n\t\tlikePost = $bindable(),\n\t\tthisAuth,\n\t\thash,\n\t\tauth,\n\t\theight,\n\t\tsequence,\n\t\tbody,\n\t\tlikes,\n\t\tdislikes,\n\t\tref,\n\t\terror\n\t} = $props();\n</script>\n\n<div class=\"container\">\n\t<div class=\"auth\">\n\t\t{#if !thisAuth}\n\t\t\t<img height=\"32px\" src={blo(auth, 16)} alt={auth} />\n\t\t{:else}\n\t\t\t<div style=\"width:32px\"></div>\n\t\t{/if}\n\t</div>\n\t<div class=\"post {thisAuth ? 'op' : ''} \">\n\t\t<div class=\"footer\">\n\t\t\t<div class=\"fill\"></div>\n\t\t\t<div class=\"action\"></div>\n\t\t</div>\n\t\t{#if !error}\n\t\t\t{#if body.length > TRUNCATE+20  && showMore}\n\t\t\t\t<div>\n\t\t\t\t\t{body}\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tonclick={() => {\n\t\t\t\t\t\t\tshowMore = !showMore;\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{showMore ? 'show less' : 'show more'}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t{:else if body.length > TRUNCATE+20 }\n\t\t\t\t<div>\n\t\t\t\t\t{body.substring(0,TRUNCATE) + ' ...'}\n\t\t\t\t\t<button\n\t\t\t\t\t\tonclick={() => {\n\t\t\t\t\t\t\tshowMore = !showMore;\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{showMore ? 'show less' : 'show more'}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t{:else}\n\t\t\t\t{body}\n\t\t\t{/if}\n\t\t{:else}\n\t\t\t<div class=\"error\">\n\t\t\t\t{error}\n\t\t\t</div>\n\t\t{/if}\n\t\t<div class=\"footer\">\n\t\t\t<div class=\"hash\">{hash}</div>\n\t\t\t<div class=\"fill\"></div>\n\n\t\t\t<div class=\"actions\">\n\t\t\t\t<button\n\t\t\t\t\tonclick={() => {\n\t\t\t\t\t\tlikePost(hash);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<img height=\"16px\" src={likesIcon} alt=\"likes\" />\n\t\t\t\t\t{likes}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div class=\"timestamp\">{height} â–  {sequence}</div>\n\t\t</div>\n\t</div>\n\t<div class=\"auth\">\n\t\t{#if thisAuth}\n\t\t\t<img height=\"32px\" src={blo(auth, 16)} alt={auth} />\n\t\t{:else}\n\t\t\t<div style=\"width:32px\"></div>\n\t\t{/if}\n\t</div>\n</div>\n\n<style>\n\t.container {\n\t\tdisplay: flex;\n\t\tpadding: 5px;\n\t}\n\t.post {\n\t\tborder-radius: 10px;\n\t\tpadding: 5px 5px 5px 15px;\n\t\tbackground-color: #eeeeee;\n\t\tmargin: auto;\n\t\twidth: 100%;\n\t\twhite-space: pre-line;\n\t\tword-break: break-word;\n\t}\n\n\tbutton {\n\t\tborder-width: 0px;\n\t\tbackground: transparent;\n\t\tfont-weight: 700;\n\t\tcolor: #ad67c2;\n\t\tfont-size: small;\n\t}\n\t\n\t.actions {\n\t\tmargin: auto;\n\t\tfont-size: x-small;\n\t\tfont-weight: 400;\n\t\tvertical-align: middle;\n\t}\n\t.footer {\n\t\tdisplay: flex;\n\t}\n\t.hash {\n\t\tfont-size: xx-small;\n\t\tfont-weight: 200;\n\t\talign-content: flex-start;\n\t\tcolor: #857070;\n\t\tmax-width: 70%;\n\t\tword-wrap: anywhere;\n\t}\n\t.fill {\n\t\tflex: 1;\n\t}\n\t.timestamp {\n\t\tfont-size: xx-small;\n\t\tfont-weight: 200;\n\t\tcolor: #777;\n\t}\n\t.auth {\n\t\talign-content: center;\n\t\tpadding: 5px 5px 5px 5px;\n\t}\n\t.auth img {\n\t\tborder-radius: 20%;\n\t}\n\n\t.post :global {\n\t\tp {\n\t\t\tfont-weight: 400;\n\t\t\tline-height: 1;\n\t\t}\n\t}\n\n\t.post.op {\n\t\tbackground-color: #fff;\n\t}\n\n\t.error {\n\t\tcolor: brown;\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { onMount, onDestroy } from 'svelte';\n\timport { page } from '$app/state';\n\timport { binToHex, cashAddressToLockingBytecode, encodeTransactionBCH } from '@bitauth/libauth';\n\n\timport { ElectrumClient, ConnectionStatus } from '@electrum-cash/network';\n\n\timport { IndexedDBProvider } from '@mainnet-cash/indexeddb-storage';\n\timport { BaseWallet, Wallet, TestNetWallet, NFTCapability, TokenSendRequest } from 'mainnet-js';\n\timport { blo } from 'blo';\n\n\timport {\n\t\tcashAssemblyToHex,\n\t\tgetScriptHash,\n\t\tgetHdPrivateKey,\n\t\ttype UtxoI,\n\t\tgetAllTransactions,\n\t\tsumSourceOutputValue,\n\t\tsumUtxoValue\n\t} from '@unspent/tau';\n\n\timport { Channel, Post, buildChannel, parseUsername } from '@fbch/lib';\n\n\timport trash from '$lib/images/trash.svg';\n\timport BitauthLink from '$lib/BitauthLink.svelte';\n\timport ChatPost from '$lib/ChatPost.svelte';\n\timport CONNECTED from '$lib/images/connected.svg';\n\timport DISCONNECTED from '$lib/images/disconnected.svg';\n\n\tconst isMainnet = page.url.hostname == 'vox.cash';\n\tconst prefix = isMainnet ? 'bitcoincash' : 'bchtest';\n\tconst server = isMainnet ? 'bch.imaginary.cash' : 'chipnet.bch.ninja';\n\tconst explorer = isMainnet\n\t\t? 'https://explorer.salemkode.com/address/'\n\t\t: 'https://cbch.loping.net/address/';\n\n\tconst protocol_prefix = cashAssemblyToHex(`OP_RETURN <\"U3V\">`);\n\n\tlet now = $state(0);\n\tlet balance = $state(0);\n\tlet contractBalance = $state(0n);\n\tlet connectionStatus = $state('');\n\tlet contractState = $state('');\n\n\tlet { topic, transactions } = $props();\n\tlet message = $state('');\n\tlet thisAuth = $state('');\n\tlet sequence = $state(0);\n\tlet estimate = $state(0);\n\tlet showSettings = $state(false);\n\n\tconst scripthash = $derived(Channel.getScriptHash(topic));\n\tconst contractAddress = $derived(Channel.getAddress(topic, prefix));\n\n\tlet posts: any[] = $state([]);\n\n\tlet timer: any;\n\tlet key = '';\n\tlet electrumClient: any;\n\tlet walletScriptHash = '';\n\n\tlet wallet: any;\n\tlet walletUnspent: any[] = $state([]);\n\n\tconst debounceUpdateWallet = () => {\n\t\tclearTimeout(timer);\n\t\ttimer = setTimeout(() => {\n\t\t\tupdateWallet();\n\t\t\tupdateContract();\n\t\t}, 1500);\n\t};\n\n\tconst handleNotifications = async function (data: any) {\n\t\tif (data.method === 'blockchain.headers.subscribe') {\n\t\t\tlet d = data.params[0];\n\t\t\tnow = d.height;\n\t\t} else if (data.method === 'blockchain.scripthash.subscribe') {\n\t\t\tif (data.params[1] !== contractState) {\n\t\t\t\tcontractState = data.params[1];\n\t\t\t\tconnectionStatus = ConnectionStatus[electrumClient.status];\n\t\t\t\tdebounceUpdateWallet();\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log(data);\n\t\t}\n\t};\n\n\tconst updateScroll = function () {\n\t\tlet chat = document.getElementById('chat')!;\n\t\tvar xH = chat.scrollHeight;\n\t\tchat.scrollTo(0, xH);\n\t};\n\n\tconst likePost = async function (postId: string) {\n\t\tlet likePostTx = Channel.like(\n\t\t\ttopic,\n\t\t\tpostId,\n\t\t\twalletUnspent[0],\n\t\t\t(Math.round(now / 1000) + 10) * 10,\n\t\t\tkey\n\t\t);\n\n\t\tlet raw_tx = binToHex(encodeTransactionBCH(likePostTx.transaction));\n\t\tawait broadcast(raw_tx);\n\t};\n\n\tconst setHeight = async function () {\n\t\tlet response = await electrumClient.request('blockchain.headers.get_tip');\n\t\tif (response instanceof Error) throw response;\n\t\tnow = response.height;\n\t};\n\tconst updateWallet = async function () {\n\t\tlet response = await electrumClient.request(\n\t\t\t'blockchain.scripthash.listunspent',\n\t\t\twalletScriptHash,\n\t\t\t'include_tokens'\n\t\t);\n\t\tif (response instanceof Error) throw response;\n\t\tbalance = sumUtxoValue(response);\n\n\t\twalletUnspent = response.filter(\n\t\t\t(u: UtxoI) =>\n\t\t\t\tu.token_data && u.token_data.nft && u.token_data.nft.commitment.startsWith(protocol_prefix)\n\t\t);\n\t\tif (walletUnspent.length > 0 && walletUnspent[0].token_data) {\n\t\t\tthisAuth = walletUnspent[0].token_data.category;\n\t\t}\n\t};\n\n\tconst clearPosts = async function () {\n\t\tlet response = await electrumClient.request(\n\t\t\t'blockchain.scripthash.listunspent',\n\t\t\tscripthash,\n\t\t\t'include_tokens'\n\t\t);\n\t\tif (response instanceof Error) throw response;\n\t\tlet old = response.filter((u: UtxoI) => u.height > 0 && now - u.height > 1000);\n\t\tif (old.length > 0) {\n\t\t\tlet clearPostTx = Channel.clear(topic, old, walletUnspent[0], key, now);\n\t\t\tlet raw_tx = binToHex(encodeTransactionBCH(clearPostTx.transaction));\n\t\t\tconsole.log(raw_tx);\n\t\t\tawait broadcast(raw_tx);\n\t\t}\n\t};\n\n\tconst burnSpam = async function () {\n\t\tlet response = await electrumClient.request(\n\t\t\t'blockchain.scripthash.listunspent',\n\t\t\tscripthash,\n\t\t\t'include_tokens'\n\t\t);\n\t\tif (response instanceof Error) throw response;\n\n\t\tlet spam = response.filter((u: UtxoI) => Math.floor(u.value / 10) * 1000 - u.height < 1000);\n\t\tif (spam.length > 0) {\n\t\t\tlet clearPostTx = Channel.clear(topic, spam, walletUnspent[0], key, now);\n\t\t\tlet raw_tx = binToHex(encodeTransactionBCH(clearPostTx.transaction));\n\t\t\tconsole.log(raw_tx);\n\t\t\tawait broadcast(raw_tx);\n\t\t}\n\t};\n\n\tconst updateContract = async function () {\n\t\tlet response = await electrumClient.request(\n\t\t\t'blockchain.scripthash.listunspent',\n\t\t\tscripthash,\n\t\t\t'include_tokens'\n\t\t);\n\n\t\tif (response instanceof Error) throw response;\n\t\tcontractBalance = sumUtxoValue(response);\n\n\t\tlet tx_hashes = Array.from(new Set(response.map((utxo: any) => utxo.tx_hash))) as string[];\n\n\t\tlet historyResponse = await electrumClient.request(\n\t\t\t'blockchain.scripthash.get_history',\n\t\t\tscripthash,\n\t\t\tnow - 1500,\n\t\t\t-1\n\t\t);\n\n\t\tlet transactions = await getAllTransactions(electrumClient, tx_hashes);\n\n\t\tposts = buildChannel(historyResponse, transactions, topic);\n\t\tposts = posts.map((p) => {\n\t\t\treturn {\n\t\t\t\tthisAuth: thisAuth == p.auth,\n\t\t\t\t...p\n\t\t\t};\n\t\t});\n\n\t\t// update the current sequence state to match the chan\n\t\tif (posts.slice(-1).length > 0) {\n\t\t\tsequence = posts.slice(-1)[0].height <= 0 ? posts.slice(-1)[0].sequence + 1 : 0;\n\t\t} else {\n\t\t\tsequence = 0;\n\t\t}\n\t};\n\n\tconst clearPost = async function (post: Post) {\n\t\tlet response = await electrumClient.request(\n\t\t\t'blockchain.scripthash.listunspent',\n\t\t\tscripthash,\n\t\t\t'include_tokens'\n\t\t);\n\t\tif (response instanceof Error) throw response;\n\n\t\tlet utxos = response.filter((u: UtxoI) => u.tx_hash == post.hash);\n\t\tlet clearPostTx = Channel.clear(topic, utxos, walletUnspent[0], key, now);\n\t\tlet raw_tx = binToHex(encodeTransactionBCH(clearPostTx.transaction));\n\t\tawait broadcast(raw_tx);\n\t};\n\n\tconst debounceEstimate = () => {\n\t\tclearTimeout(timer);\n\t\ttimer = setTimeout(() => {\n\t\t\testimate = reEstimate(message);\n\t\t}, 500);\n\t};\n\n\tconst reEstimate = function (msg: string) {\n\t\tif (msg.length > 0) {\n\t\t\tlet post = Channel.post(\n\t\t\t\ttopic,\n\t\t\t\tmsg,\n\t\t\t\twalletUnspent[0],\n\t\t\t\t(Math.round(now / 1000) + 10) * 10,\n\t\t\t\tkey,\n\t\t\t\tsequence\n\t\t\t);\n\t\t\tconst returned = post.transaction.outputs[post.transaction.outputs.length - 1].valueSatoshis;\n\t\t\treturn Number(sumSourceOutputValue(post.sourceOutputs) - returned);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n\n\tconst send = async function (msg: string) {\n\t\tlet minValue = (Math.round(now / 1000) + 10) * 10;\n\n\t\tlet post = Channel.post(topic, msg, walletUnspent[0], minValue, key, sequence);\n\n\t\tlet raw_tx = binToHex(encodeTransactionBCH(post.transaction));\n\t\tawait broadcast(raw_tx);\n\t\tmessage = '';\n\t};\n\n\tconst broadcast = async function (raw_tx: string) {\n\t\tlet response = await electrumClient.request('blockchain.transaction.broadcast', raw_tx);\n\t\tsequence += 1;\n\t\tif (response instanceof Error) {\n\t\t\tconnectionStatus = ConnectionStatus[electrumClient.status];\n\t\t\tthrow response;\n\t\t}\n\t\tresponse as any[];\n\t};\n\n\tconst newAuthBaton = async function () {\n\t\tawait wallet.sendMax(wallet.getDepositAddress());\n\t\tlet uname = cashAssemblyToHex(`OP_RETURN <\"U3V\"> <\"pseudonymous\">`);\n\t\tlet sendResponse = await wallet.tokenGenesis({\n\t\t\tcashaddr: wallet.getTokenDepositAddress()!, // token UTXO recipient, if not specified will default to sender's address\n\t\t\tcommitment: uname, // NFT Commitment message\n\t\t\tcapability: NFTCapability.minting, // NFT capability\n\t\t\tvalue: 1_000_000 // Satoshi value\n\t\t});\n\t};\n\n\tconst topUp = async function (amount: number) {\n\t\tbalance = walletUnspent[0].value;\n\t\tthisAuth = walletUnspent[0].token_data.category;\n\t\tlet uname = cashAssemblyToHex(`OP_RETURN <\"U3V\"> <\"pseudonymous\">`);\n\n\t\tlet sendResponse = await wallet.send(\n\t\t\tnew TokenSendRequest({\n\t\t\t\tcashaddr: wallet.getTokenDepositAddress()!,\n\t\t\t\ttokenId: thisAuth,\n\t\t\t\tcommitment: uname, // NFT Commitment message\n\t\t\t\tcapability: NFTCapability.minting, // NFT capability\n\t\t\t\tvalue: balance + amount // Satoshi value\n\t\t\t})\n\t\t);\n\t\tawait updateWallet();\n\t};\n\n\tonMount(async () => {\n\t\tBaseWallet.StorageProvider = IndexedDBProvider;\n\t\twallet = isMainnet ? await Wallet.named(`vox`) : await TestNetWallet.named(`vox`);\n\t\tkey = getHdPrivateKey(wallet.mnemonic!, wallet.derivationPath.slice(0, -2), wallet.isTestnet);\n\t\tlet bytecodeResult = cashAddressToLockingBytecode(wallet.getDepositAddress());\n\t\tif (typeof bytecodeResult == 'string') throw bytecodeResult;\n\t\twalletScriptHash = getScriptHash(bytecodeResult.bytecode);\n\n\t\t// Initialize an electrum client.\n\t\telectrumClient = new ElectrumClient(Channel.USER_AGENT, '1.4.1', server);\n\n\t\t// Wait for the client to connect.\n\t\tawait electrumClient.connect();\n\t\t// Set up a callback function to handle new blocks.\n\n\t\t// Listen for notifications.\n\t\telectrumClient.on('notification', handleNotifications);\n\t\tconnectionStatus = ConnectionStatus[electrumClient.status];\n\t\t// Set up a subscription for new block headers.\n\t\tawait electrumClient.subscribe('blockchain.scripthash.subscribe', scripthash);\n\t\tawait electrumClient.subscribe('blockchain.scripthash.subscribe', walletScriptHash);\n\t\tawait setHeight();\n\t\tawait updateWallet();\n\t\tawait updateContract();\n\t\tupdateScroll();\n\t});\n\n\tonDestroy(async () => {\n\t\tawait wallet.provider.disconnect();\n\t\tawait electrumClient.disconnect();\n\t});\n</script>\n\n<div class=\"box\">\n\t<div class=\"row header\">\n\t\t{now.toLocaleString()}<sub>â– </sub>\n\t\t{sequence}\n\n\t\t<div style=\"flex: 2 2 auto;\"></div>\n\t\t<b><a href=\"/pop/\">/pop</a>/{topic}</b>\n\t\t<div style=\"flex: 2 2 auto;\"></div>\n\t\t{#if contractBalance}\n\t\t\t<a target=\"_blank\" href=\"{explorer}{contractAddress}\">\n\t\t\t\t{Math.floor(Number(contractBalance) / 1000).toLocaleString()}k sats &nbsp;\n\t\t\t</a>\n\t\t{/if}\n\t\t<BitauthLink template={Channel.template} />\n\t\t{#if connectionStatus == 'CONNECTED'}\n\t\t\t<img src={CONNECTED} alt={connectionStatus} />\n\t\t{:else}\n\t\t\t<img src={DISCONNECTED} alt=\"Disconnected\" />\n\t\t{/if}\n\t</div>\n\t<div id=\"chat\" class=\"row content\">\n\t\t{#await transactions then build}\n\t\t\t{#each posts as post}\n\t\t\t\t<ChatPost {likePost} {...post} />\n\t\t\t\t{#if showSettings}\n\t\t\t\t\t<div class=\"deleteMe\">\n\t\t\t\t\t\t<button onclick={() => clearPost(post)}>\n\t\t\t\t\t\t\t<img height=\"36px\" src={trash} />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t{/each}\n\t\t{:catch error}\n\t\t\t<p style=\"color: red\">{error.message}</p>\n\t\t{/await}\n\t</div>\n\t{#if balance > 1000000 && walletUnspent.length == 0}\n\t\t<div class=\"row footer\">\n\t\t\t<h2>Create new identity</h2>\n\t\t\t<button onclick={() => newAuthBaton()}>New identity 1M sats</button>\n\t\t</div>\n\t{:else if balance < 1100000 && walletUnspent.length == 0}\n\t\t<div class=\"row footer\">\n\t\t\t<p><a href=\"/wallet\">Deposit funds</a> to create identity</p>\n\t\t</div>\n\t{:else}\n\t\t<div class=\"row footer\">\n\t\t\t{#if connectionStatus == 'CONNECTED'}\n\t\t\t\t<div class=\"edit\">\n\t\t\t\t\t<textarea onkeyup={() => debounceEstimate()} bind:value={message}> </textarea>\n\t\t\t\t\t<div class=\"estimate\">\n\t\t\t\t\t\t{estimate.toLocaleString()} sats\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"send\">\n\t\t\t\t\t<div class=\"auth\">\n\t\t\t\t\t\t{#if thisAuth}\n\t\t\t\t\t\t\t<img height=\"32px\" src={blo(thisAuth, 16)} alt=\"avatar\" />\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t{#if walletUnspent.length > 0}\n\t\t\t\t\t\t\t<div style=\"font-size:x-small;\">\n\t\t\t\t\t\t\t\t{parseUsername(walletUnspent[0].token_data.nft.commitment)}<br />\n\t\t\t\t\t\t\t\t{walletUnspent[0].value.toLocaleString()}sats\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</div>\n\t\t\t\t\t<button onclick={() => send(message)}>Send</button>\n\t\t\t\t</div>\n\t\t\t{:else}\n\t\t\t\t<p>Not connected?</p>\n\t\t\t{/if}\n\t\t</div>\n\t{/if}\n\n\t<div class=\"row footer\">\n\t\t<div style=\"margin: auto;\">Advanced</div>\n\t\t<div>\n\t\t\t<!-- Rounded switch -->\n\t\t\t<label class=\"switch\">\n\t\t\t\t<input type=\"checkbox\" bind:checked={showSettings} />\n\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t</label>\n\t\t</div>\n\t</div>\n\n\t{#if showSettings}\n\t\t{#if walletUnspent.length > 0}\n\t\t\t<div class=\"row footer\">\n\t\t\t\t<button onclick={() => topUp(10000000)}>Top up 10M sats</button>\n\t\t\t\t<button onclick={() => topUp(1000000)}>Top up 1M sats</button>\n\t\t\t</div>\n\t\t\t<div class=\"row footer\">\n\t\t\t\t<button onclick={() => clearPosts()}>Clear Old Posts</button>\n\t\t\t\t<button onclick={() => burnSpam()}>Burn Spam</button>\n\t\t\t</div>\n\t\t{/if}\n\t{/if}\n</div>\n\n<style>\n\t.box {\n\t\tdisplay: flex;\n\t\tflex: 1 1 auto;\n\t\tflex-flow: column;\n\t\theight: 100%;\n\t\tborder-radius: 10px;\n\t\tborder: 1px solid rgba(78, 11, 92, 0.452);\n\t\tbackground-color: #ffffff33;\n\t}\n\n\t.box .row {\n\t\tborder: 1px dotted grey;\n\t}\n\n\t.box .row.header {\n\t\tpadding: 3px;\n\t\tdisplay: flex;\n\t\tcolor: #ff00ff77;\n\t\tfont-weight: 800;\n\t\ttext-align: center;\n\t\tflex: 0 1 auto;\n\t\t/* The above is shorthand for:\n        flex-grow: 0,\n        flex-shrink: 1,\n        flex-basis: auto\n        */\n\t}\n\n\t.box .row.content {\n\t\tflex: 1 1 auto;\n\t\toverflow-y: scroll;\n\t\toverflow-x: hidden;\n\t\tmax-height: 65vh;\n\t}\n\n\t.box .row.footer .edit {\n\t\twidth: 100%;\n\t\tflex: 1 1 auto;\n\t\tbackground: #fff0f044;\n\t\tborder: #666;\n\t\tborder-width: 1px;\n\t\tpadding: 5px;\n\t}\n\t.edit textarea {\n\t\twidth: 100%;\n\t\tmin-height: 10em;\n\t}\n\n\t.estimate {\n\t\tfont-size: x-small;\n\t\tfont-weight: 200;\n\t\talign-content: flex-start;\n\t\tcolor: #554949;\n\t\tword-wrap: anywhere;\n\t\ttext-align: right;\n\t}\n\n\t.box .row.footer {\n\t\tbackground: #eeeeee22;\n\t\tflex: 0 1 auto;\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\theight: auto;\n\t\tresize: none;\n\t\tpadding: 10px;\n\t}\n\n\t.deleteMe {\n\t\tposition: relative;\n\t\toverflow: visible;\n\t\theight: 0px;\n\t\tleft: 30px;\n\t\ttop: -45px;\n\t}\n\t.deleteMe button {\n\t\tbackground-color: rgb(233, 138, 138); /* Green */\n\t\tpadding: 5px;\n\t\tborder-radius: 40%;\n\t}\n\t.send {\n\t\talign-content: center;\n\t\tpadding: 5px;\n\t}\n\n\t.auth {\n\t\talign-content: center;\n\t\tpadding: 10px;\n\t}\n\t.auth img {\n\t\tborder-radius: 20%;\n\t}\n\n\tbutton {\n\t\tbackground-color: #a45eb6; /* Green */\n\t\tborder: none;\n\t\tcolor: white;\n\t\tpadding: 10px;\n\t\tborder-radius: 20px;\n\t\ttext-align: center;\n\t\ttext-decoration: none;\n\t\tdisplay: inline-block;\n\t\tfont-size: 16px;\n\t}\n\n\t.switch {\n\t\tposition: relative;\n\t\tdisplay: inline-block;\n\t\twidth: 60px;\n\t\theight: 34px;\n\t}\n\n\t/* Hide default HTML checkbox */\n\t.switch input {\n\t\topacity: 0;\n\t\twidth: 0;\n\t\theight: 0;\n\t}\n\n\t/* The slider */\n\t.slider {\n\t\tposition: absolute;\n\t\tcursor: pointer;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground-color: #ccc;\n\t\t-webkit-transition: 0.4s;\n\t\ttransition: 0.4s;\n\t}\n\n\t.slider:before {\n\t\tposition: absolute;\n\t\tcontent: '';\n\t\theight: 26px;\n\t\twidth: 26px;\n\t\tleft: 4px;\n\t\tbottom: 4px;\n\t\tbackground-color: white;\n\t\t-webkit-transition: 0.4s;\n\t\ttransition: 0.4s;\n\t}\n\n\tinput:checked + .slider {\n\t\tbackground-color: #a45eb6;\n\t}\n\n\tinput:focus + .slider {\n\t\tbox-shadow: 0 0 1px #a45eb6;\n\t}\n\n\tinput:checked + .slider:before {\n\t\t-webkit-transform: translateX(26px);\n\t\t-ms-transform: translateX(26px);\n\t\ttransform: translateX(26px);\n\t}\n\n\t/* Rounded sliders */\n\t.slider.round {\n\t\tborder-radius: 34px;\n\t}\n\n\t.slider.round:before {\n\t\tborder-radius: 50%;\n\t}\n</style>\n"],"names":["set_class","dom","is_html","value","hash","prev_classes","next_classes","prev","hydrating","next_class_name","to_class","DEFAULT_CONCURRENCY","promiseAllInBatches","task","items","batchSize","position","results","itemsForBatch","item","getTransactionWrap","args","getAllTransactions","electrumClient","tx_hashes","tx_hash","trash","likesIcon","on_click","_","showMore","$.set","on_click_1","__1","on_click_2","__2","$$props","TRUNCATE","blo","$$render","consequent_2","alternate_2","consequent_1","alternate_1","$.set_class","div_3","clearPost","post","newAuthBaton","debounceEstimate","__3","send","message","on_click_3","__4","topUp","on_click_4","__5","clearPosts","burnSpam","isMainnet","page","prefix","server","explorer","protocol_prefix","cashAssemblyToHex","now","balance","contractBalance","connectionStatus","contractState","thisAuth","sequence","estimate","showSettings","scripthash","$.derived","Channel","contractAddress","posts","$.state","$.proxy","timer","key","walletScriptHash","wallet","walletUnspent","debounceUpdateWallet","updateWallet","updateContract","handleNotifications","data","d","$.get","ConnectionStatus","updateScroll","chat","xH","likePost","postId","likePostTx","raw_tx","binToHex","encodeTransactionBCH","broadcast","setHeight","response","sumUtxoValue","u","old","clearPostTx","spam","utxo","historyResponse","transactions","buildChannel","p","utxos","reEstimate","msg","returned","sumSourceOutputValue","minValue","uname","NFTCapability","amount","TokenSendRequest","onMount","BaseWallet","IndexedDBProvider","Wallet","TestNetWallet","getHdPrivateKey","bytecodeResult","cashAddressToLockingBytecode","getScriptHash","ElectrumClient","onDestroy","$.set_attribute","a","consequent","CONNECTED","DISCONNECTED","alternate","build","$.each","node_4","error","$.template_effect","$.set_text","text_4","consequent_5","parseUsername","consequent_6","$0","text_5","$.bind_value","textarea","$$value","consequent_7","alternate_3","consequent_4","consequent_3","consequent_8","consequent_9","$.bind_checked","input"],"mappings":"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","x_google_ignoreList":[0]}