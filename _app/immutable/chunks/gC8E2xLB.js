import{h as k,f as u,n as H,u as w,c as K,d as E,a as B,e as N}from"./zIYK9qkZ.js";var d;(function(e){e.invalidIterations="Invalid PBKDF2 parameters: iterations must be a positive integer.",e.invalidDerivedKeyLength="Invalid PBKDF2 parameters: derived key length must be a positive integer.",e.invalidHmacLength="Invalid HMAC length: HMAC length must be a positive integer."})(d||(d={}));const M=(e,t)=>s=>{const{password:i,salt:a,iterations:n,derivedKeyLength:r}=s;if(!Number.isInteger(n)||n<=0)return u(d.invalidIterations,`Iterations parameter: ${n}.`);if(!Number.isInteger(r)||r<=0)return u(d.invalidDerivedKeyLength,`Derived key length: ${r}.`);if(!Number.isInteger(t)||t<=0)return u(d.invalidHmacLength,`HMAC length: ${t}.`);const o=4,g=new Uint8Array(r),c=new Uint8Array(a.length+o);c.set(a,0);let f=0;const b=Math.ceil(r/t);for(let m=1;m<=b;m++){const I=H(m);c.set(I,a.length);const h=e(i,c);let v=h;for(let p=1;p<n;p++){v=e(i,v);for(let l=0;l<t;l++)h[l]^=v[l]}const P=h.subarray(0,r);g.set(P,f),f+=t}return g},S=64,D=(e,t=k)=>M(t,S)(e);var y;(function(e){e.invalidEntropyLength="BIP39 Error: invalid entropy length. Entropy length must be 16, 20, 24, 28, or 32 bytes.",e.invalidMnemonicLength="BIP39 Error: invalid mnemonic length. Word count must be 12, 15, 18, 21, or 24.",e.invalidWordListLength="BIP39 Error: invalid word list length. BIP39 word lists must contain exactly 2048 words.",e.invalidChecksum="BIP39 Error: invalid checksum for the given mnemonic phrase.",e.unknownWord="BIP39 Error: unknown word(s). The mnemonic phrase contains one or more words that do not exist in the word list."})(y||(y={}));const F=(e,{crypto:t={pbkdf2HmacSha512:D},passphrase:s=""}={})=>{const i=e.normalize("NFKD"),n=`mnemonic${s}`.normalize("NFKD"),r=w(i),o=w(n);return t.pbkdf2HmacSha512({derivedKeyLength:64,iterations:2048,password:r,salt:o})};function C(e,t,s=!1){if(e.length==0)throw Error("refusing to create wallet from empty mnemonic");const i=F(e);K(i);const a=s?"testnet":"mainnet";let n=E(i);if(typeof n=="string")throw Error(n);const r=B(n,t);let o=N({network:a,node:r});if(typeof o=="string")throw Error(o);return o.hdPrivateKey}export{C as g};
//# sourceMappingURL=gC8E2xLB.js.map
