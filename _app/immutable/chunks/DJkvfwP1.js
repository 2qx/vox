import{h as b,f as d,n as B,u as g,w as C,b as I,c as T,d as L,e as _,g as S}from"./D9Q_XYav.js";var c;(function(e){e.invalidIterations="Invalid PBKDF2 parameters: iterations must be a positive integer.",e.invalidDerivedKeyLength="Invalid PBKDF2 parameters: derived key length must be a positive integer.",e.invalidHmacLength="Invalid HMAC length: HMAC length must be a positive integer."})(c||(c={}));const D=(e,t)=>a=>{const{password:o,salt:r,iterations:i,derivedKeyLength:n}=a;if(!Number.isInteger(i)||i<=0)return d(c.invalidIterations,`Iterations parameter: ${i}.`);if(!Number.isInteger(n)||n<=0)return d(c.invalidDerivedKeyLength,`Derived key length: ${n}.`);if(!Number.isInteger(t)||t<=0)return d(c.invalidHmacLength,`HMAC length: ${t}.`);const s=4,v=new Uint8Array(n),h=new Uint8Array(r.length+s);h.set(r,0);let P=0;const K=Math.ceil(n/t);for(let m=1;m<=K;m++){const f=B(m);h.set(f,r.length);const u=e(o,h);let p=u;for(let k=1;k<i;k++){p=e(o,p);for(let l=0;l<t;l++)u[l]^=p[l]}const w=u.subarray(0,n);v.set(w,P),P+=t}return v},E=64,A=(e,t=b)=>D(t,E)(e);var H;(function(e){e.invalidEntropyLength="BIP39 Error: invalid entropy length. Entropy length must be 16, 20, 24, 28, or 32 bytes.",e.invalidMnemonicLength="BIP39 Error: invalid mnemonic length. Word count must be 12, 15, 18, 21, or 24.",e.invalidWordListLength="BIP39 Error: invalid word list length. BIP39 word lists must contain exactly 2048 words.",e.invalidChecksum="BIP39 Error: invalid checksum for the given mnemonic phrase.",e.unknownWord="BIP39 Error: unknown word(s). The mnemonic phrase contains one or more words that do not exist in the word list."})(H||(H={}));const N=(e,{crypto:t={pbkdf2HmacSha512:A},passphrase:a=""}={})=>{const o=e.normalize("NFKD"),i=`mnemonic${a}`.normalize("NFKD"),n=g(o),s=g(i);return t.pbkdf2HmacSha512({derivedKeyLength:64,iterations:2048,password:n,salt:s})},F={$schema:"https://libauth.org/schemas/wallet-template-v0.schema.json",description:`A standard single-factor wallet template that uses Pay-to-Public-Key-Hash (P2PKH), the most common authentication scheme in use on the network.

This P2PKH template uses BCH Schnorr signatures, reducing the size of transactions. Because the template uses a Hierarchical Deterministic (HD) key, it also supports watch-only clients.`,entities:{owner:{description:"The individual who can spend from this wallet.",name:"Owner",scripts:["lock","unlock"],variables:{key:{description:"The private key that controls this wallet.",name:"Key",type:"HdKey"}}}},name:"Single Signature (P2PKH)",scripts:{lock:{lockingType:"standard",name:"P2PKH Lock",script:`OP_DUP
OP_HASH160 <$(<key.public_key> OP_HASH160
)> OP_EQUALVERIFY
OP_CHECKSIG`},unlock:{name:"Unlock",script:`<key.schnorr_signature.all_outputs>
<key.public_key>`,unlocks:"lock"}},supported:["BCH_2020_05","BCH_2021_05","BCH_2022_05"],version:0};var y;(function(e){e.hdPrivateKeyToP2pkhLockingBytecodeCompilation="P2PKH utility error: could not derive P2PKH locking bytecode from the provided HD private key.",e.hdPublicKeyToP2pkhLockingBytecodeCompilation="P2PKH utility error: could not derive P2PKH locking bytecode from the provided HD public key.",e.privateKeyToP2pkhLockingBytecodeCompilation="P2PKH utility error: could not derive P2PKH locking bytecode from the provided private key.",e.publicKeyToP2pkhLockingBytecodeCompilation="P2PKH utility error: could not derive P2PKH locking bytecode from the provided public key."})(y||(y={}));const z=({addressIndex:e,hdPrivateKey:t,privateDerivationPath:a="i",throwErrors:o=!0})=>{const r=structuredClone(F);r.entities.owner.variables.key.privateDerivationPath=a;const n=C(r).generateBytecode({data:{hdKeys:{addressIndex:e,hdPrivateKeys:{owner:t}}},scriptId:"lock"});return n.success?n.bytecode:d(y.hdPrivateKeyToP2pkhLockingBytecodeCompilation,I(n.errors),o)};function O(e,t,a=!1){if(e.length==0)throw Error("refusing to create wallet from empty mnemonic");const o=N(e);T(o);const r=a?"testnet":"mainnet";let i=L(o);if(typeof i=="string")throw Error(i);const n=_(i,t);let s=S({network:r,node:n});if(typeof s=="string")throw Error(s);return s.hdPrivateKey}export{O as g,z as h};
//# sourceMappingURL=DJkvfwP1.js.map
